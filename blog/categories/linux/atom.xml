<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | PracticalWeb Ltd]]></title>
  <link href="http://www.practicalweb.co.uk/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://www.practicalweb.co.uk/"/>
  <updated>2015-10-09T17:23:39+01:00</updated>
  <id>http://www.practicalweb.co.uk/</id>
  <author>
    <name><![CDATA[Sean Burlington]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ubuntu Disk Encryption Password]]></title>
    <link href="http://www.practicalweb.co.uk/blog/2015/02/17/ubuntu-disk-encryption-password/"/>
    <updated>2015-02-17T18:50:37+00:00</updated>
    <id>http://www.practicalweb.co.uk/blog/2015/02/17/ubuntu-disk-encryption-password</id>
    <content type="html"><![CDATA[<p>To reset the password on an encrypted disk in Ubuntu use the disks tool</p>

<p>The cogs icon for the partition has a change password option</p>

<p><img src="/images/posts/ubuntu-disk-envryption-password.png" alt="screenshot" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Non-root Packet Capture in Wireshark]]></title>
    <link href="http://www.practicalweb.co.uk/blog/2014/12/03/non-root-packet-capture-in-wireshark/"/>
    <updated>2014-12-03T12:04:46+00:00</updated>
    <id>http://www.practicalweb.co.uk/blog/2014/12/03/non-root-packet-capture-in-wireshark</id>
    <content type="html"><![CDATA[<p>There are lots of blogs about this already - but I didn&rsquo;t quite understand at first so here&rsquo;s my take &hellip;</p>

<p>Wireshark is a large and somewhat vulnerable program - best not to run it as root (especially as you may be looking a suspicious traffic)</p>

<p>It uses dumpcap for the actual packet capture which is the only bit that needs elevated privileges.</p>

<p>Since linux kernel 2.2 we don&rsquo;t even need root for this bit - we can set file permissions to allow non root user to capture packets.</p>

<p>If you don&rsquo;t want to allow just any user on your system to do this first make sure only a chosen group can even run dumpcap</p>

<p>I decided to use the sudo group - but you could make a new one.</p>

<pre><code class="bash">sudo chgrp sudo /usr/bin/dumpcap
sudo chmod 750 /usr/bin/dumpcap
</code></pre>

<p>Now only members of the sudo group (who are already the users I trust) can run this program.</p>

<pre><code class="bash">sudo setcap cap_net_raw,cap_net_admin=eip /usr/bin/dumpcap
</code></pre>

<p>This allows the program to gain elevated network rights without being run by root.</p>

<p>Note that any chmod action seems to undo the setcap so perform the changes in this order.</p>

<p>Now I can run wireshark as my regular user and have full functionality.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Specifying MTU for a VPN Connection in NetworkManager]]></title>
    <link href="http://www.practicalweb.co.uk/blog/2014/12/03/specifying-mtu-for-a-vpn-connection-in-networkmanager/"/>
    <updated>2014-12-03T11:34:35+00:00</updated>
    <id>http://www.practicalweb.co.uk/blog/2014/12/03/specifying-mtu-for-a-vpn-connection-in-networkmanager</id>
    <content type="html"><![CDATA[<p>I need to use a VPN which was suffering packet fragmentation due to the overhead involved (actually I use a VPN to connect to a network which then has another VPN connection to a third network).</p>

<p>To determine the largest MTU size which didn&rsquo;t lead to fragmentation I just ran variations on</p>

<pre><code class="bash ">ping -M do -s 1327 server.example.com
</code></pre>

<p><code>-M do</code> prohibits fragmentation so the ping will fail if the packet size is too large</p>

<p>I tried larger/ smaller values till I found the largest number that worked.</p>

<p>Network Manager didn&rsquo;t give me a GUI to set MTU on the VPN connection (it does for ethernet)</p>

<p>So I needed a script in /etc/network/if-up.d/</p>

<p>I called mine like myvpn-mtu (owned by root and executable)</p>

<pre><code class="bash">#! /bin/sh
# set low MTU for my VPN otherwise I get packet fragmentation
set -e


if [ "$CONNECTION_ID" = myvpn ] &amp;&amp; [ "$MODE" = start ]; then
  /sbin/ifconfig $IFACE mtu 1327
fi


exit 0
</code></pre>

<p>Substitute &ldquo;myvpn&rdquo; here for your connection name</p>

<p>The script env has the following variables (I&rsquo;ve anonymised some variables)</p>

<pre><code>ADDRFAM=NetworkManager
CONNECTION_ID=xxxxxxxxxxxxxx
CONNECTION_UUID=xxxxxxx-xxxxx-xxxxx-xxxx-xxxxx
DEVICE_IFACE=wlan0
DEVICE_IP_IFACE=wlan0
DHCP4_BROADCAST_ADDRESS=192.168.0.255
DHCP4_DHCP_LEASE_TIME=86400
DHCP4_DHCP_MESSAGE_TYPE=5
DHCP4_DHCP_REBINDING_TIME=75600
DHCP4_DHCP_RENEWAL_TIME=43200
DHCP4_DHCP_SERVER_IDENTIFIER=192.168.0.1
DHCP4_DOMAIN_NAME=xxx
DHCP4_DOMAIN_NAME_SERVERS=192.168.0.1
DHCP4_EXPIRY=1417685250
DHCP4_HOST_NAME=xxx
DHCP4_IP_ADDRESS=192.168.0.209
DHCP4_NETWORK_NUMBER=192.168.0.0
DHCP4_ROUTERS=192.168.0.1
DHCP4_SUBNET_MASK=255.255.255.0
IFACE=tun0
IP4_ADDRESS_0=192.168.0.209/24 192.168.0.1
IP4_DOMAINS=xxx
IP4_NAMESERVERS=192.168.0.1
IP4_NUM_ADDRESSES=1
IP4_NUM_ROUTES=0
LOGICAL=tun0
METHOD=NetworkManager
MODE=start
PHASE=post-up
PWD=/
VERBOSITY=0
VPN_IP4_ADDRESS_0=192.168.1.48/24 x.x.x.x
VPN_IP4_NAMESERVERS=x.x.x.x
VPN_IP4_NUM_ADDRESSES=1
VPN_IP4_NUM_ROUTES=28
VPN_IP4_ROUTE_0=192.168.1.0/24 0.0.0.0 0
VPN_IP4_ROUTE_1=192.168.2.0/24 0.0.0.0 0
VPN_IP4_ROUTE_2=192.168.3.0/24 0.0.0.0 0
VPN_IP4_ROUTE_3=192.168.4.0/24 0.0.0.0 0
VPN_IP_IFACE=tun0
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quick Steps to Secure Ubuntu Linux]]></title>
    <link href="http://www.practicalweb.co.uk/blog/2014/11/13/quick-steps-to-secure-ubuntu-linux/"/>
    <updated>2014-11-13T14:41:12+00:00</updated>
    <id>http://www.practicalweb.co.uk/blog/2014/11/13/quick-steps-to-secure-ubuntu-linux</id>
    <content type="html"><![CDATA[<p>Recently I&rsquo;ve been reviewing security and realised I&rsquo;ve been relying too much on my routers firewall - which isn&rsquo;t even present if I work on an open wifi connection somewhere.</p>

<p>Steps so far</p>

<p>Reinstalled Ubuntu with full disk encryption, apart from the need to back and restore data this was a painless process. I don&rsquo;t see a noticeable performance impact (though I have a fast system with SSD) the biggest drawback I can see is that if I mess around with a custom kernel and break the boot sequence - I don&rsquo;t know if I can boot from a live CD to fix it.</p>

<p>Setup a restrictive local firewall</p>

<p>as root</p>

<pre><code class="bash ">iptables -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
iptables -I INPUT 1 -i lo -j ACCEPT
iptables -P INPUT DROP
iptables -S
apt-get install iptables-persistent
</code></pre>

<p>edit /etc/postfix/main.cf</p>

<p>set</p>

<p>inet_interfaces = 127.0.0.1</p>

<p>and <code>/etc/init.d/postfix restart</code></p>

<p>I will review open ports each time I configure a new service and ensure I don&rsquo;t have services I only need local accessible externally.</p>

<p>By both configuring firewall <strong>and</strong> limiting services I am applying the principle of defence in depth and even if there is a weakness (or I make a mistake) in one place I will still be protected.</p>

<p>Where I do need to share services between systems on my home/office network I have realised my old router is not sophisticated enough and am purchasing one that can separate secure and insecure networks.</p>

<p>All systems are now being configured for automatic updates, since I want patches as soon as possible, small frequent updates are easier to debug than problems with large updates, and generally I only delay updating out of inertia rather than any deliberate action. This way I don&rsquo;t even have to think about it.</p>

<p>from  <a href="http://www.richud.com/wiki/Ubuntu_Enable_Automatic_Updates_Unattended_Upgrades">http://www.richud.com/wiki/Ubuntu_Enable_Automatic_Updates_Unattended_Upgrades</a></p>

<p>my config files are now</p>

<pre><code class="bash">cat /etc/apt/apt.conf.d/50unattended-upgrades  | grep -v ^//
Unattended-Upgrade::Allowed-Origins {
    "${distro_id}:${distro_codename}-security";
    "${distro_id}:${distro_codename}-updates";
};
Unattended-Upgrade::Package-Blacklist {
};
Unattended-Upgrade::MinimalSteps "true";
Unattended-Upgrade::Mail "root";
Unattended-Upgrade::Remove-Unused-Dependencies "false";
</code></pre>

<pre><code class="bash">cat /etc/apt/apt.conf.d/10periodic  | grep -v ^//
APT::Periodic::Update-Package-Lists "1";
APT::Periodic::Download-Upgradeable-Packages "1";
APT::Periodic::AutocleanInterval "7";
APT::Periodic::Unattended-Upgrade "1";
APT::Periodic::Verbose "2";
APT::Periodic::RandomSleep "1";
</code></pre>

<p>Also set /root/.forward to ensure I get root mail</p>

<p>I have also realised I rely too much on browser stored passwords, and while this is useful for low-security logins I will not be using it for any important site.</p>

<p>Funnily I&rsquo;ve also found I needed to revisit my backup policy and actually delete more stuff <strong>not</strong> backing up code and documents which are business confidential and are already backed up centrally. In this case I realised my own backups were just causing a data management problem just increasing the risk that the data gets accidentally disclosed.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Headless VPN on Linux With Minimal VPN Traffic and Selective DNS]]></title>
    <link href="http://www.practicalweb.co.uk/blog/2013/03/12/headless-vpn-on-linux-with-minimal-vpn-traffic-and-selective-dns/"/>
    <updated>2013-03-12T00:00:00+00:00</updated>
    <id>http://www.practicalweb.co.uk/blog/2013/03/12/headless-vpn-on-linux-with-minimal-vpn-traffic-and-selective-dns</id>
    <content type="html"><![CDATA[<p>I needed to setup a VPN client connection on a headless system where the VPN is slow and so I want to route the minimal amount of traffic through it. I need DNS to use the VPN but only for one domain.</p>

<p>This is my setup using pptp and dnsmasq (tested on centOS)</p>

<p>Basic VPN config is here</p>

<p><code>/etc/ppp/peers/office</code></p>

<pre><code># written by pptpsetup
pty "pptp vpn.example.com --nolaunchpppd"
lock
noauth
nobsdcomp
nodeflate
refuse-eap
usepeerdns
defaultroute
name sean.burlington
remotename office
ipparam office
require-mppe-128
</code></pre>

<p>Startup script adds a default route for the network I need to access via vpn and adds the DNS server to dnsmasq config</p>

<p><code>/etc/ppp/ip-up.local</code></p>

<pre><code class="bash">#!/bin/bash

for net in 192.168.128.0/17 ; do
  /sbin/route -v add -net $net dev $IFNAME
  logger -t pppd "added route for $net"
done


cp -f /etc/dnsmasq.orig /etc/dnsmasq.conf

echo "server=/example.com/${DNS1}" &gt;&gt; /etc/dnsmasq.conf

service dnsmasq restart
</code></pre>

<p>When disconnecting VPN reset dnsmasq, in my case I need the public DNS for example.com when not on VPN</p>

<p><code>/etc/ppp/ip-down.local</code></p>

<pre><code class="bash">#!/bin/bash

cp -f /etc/dnsmasq.orig /etc/dnsmasq.conf

service dnsmasq restart
</code></pre>

<p>My <code>/etc/resolv.conf</code> points first to localhost where dnsmaq runs, then to my router which provides the upstream DNS</p>

<pre><code>nameserver 127.0.0.1
nameserver 192.168.0.1
</code></pre>
]]></content>
  </entry>
  
</feed>
