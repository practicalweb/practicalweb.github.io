<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Graphite | PracticalWeb Ltd]]></title>
  <link href="http://www.practicalweb.co.uk/blog/categories/graphite/atom.xml" rel="self"/>
  <link href="http://www.practicalweb.co.uk/"/>
  <updated>2016-04-05T15:29:32+01:00</updated>
  <id>http://www.practicalweb.co.uk/</id>
  <author>
    <name><![CDATA[Sean Burlington]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Add Annotations to Grafana via Elasticsearch]]></title>
    <link href="http://www.practicalweb.co.uk/blog/2015/04/27/add-annotations-to-grafana-via-elasticsearch/"/>
    <updated>2015-04-27T21:43:55+01:00</updated>
    <id>http://www.practicalweb.co.uk/blog/2015/04/27/add-annotations-to-grafana-via-elasticsearch</id>
    <content type="html"><![CDATA[<p>It took me a while to figure out how to setup elasticsearch for grafana annotations, and I wanted a small page to allow me to add annotations</p>

<p>Mostly I figure we&rsquo;ll add a line to deploy scripts to track versions - but I&rsquo;d like to be able to manually annotate outages</p>

<p><div><script src='https://gist.github.com/29af780a56e09e3055ed.js?file=grafana-elasticsearch-annotations.html'></script>
<noscript><pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;script src=&quot;http://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;moment.min.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;moment-timezone.js&quot;&gt;&lt;/script&gt;
&lt;script&gt;

$(document).ready(function(){
    $(&quot;#annotate&quot;).click(function(){
var stuff=JSON.stringify({
          &quot;when_it_happened&quot;: $(&quot;#when_it_happened&quot;).val(),
 &quot;title&quot; : $(&quot;#title&quot;).val(),
 &quot;description&quot; : $(&quot;#description&quot;).val(),
        });

        $.post(&quot;http://graphite.example.com:9200/events/prod/&quot;,
        stuff,
        function(data,status){
            alert(&quot;Data: &quot; + JSON.stringify(data) + &quot;\nStatus: &quot; + status);
        });
    });
});
&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;h1&gt;Add an annotation to grafana&lt;/h1&gt;

&lt;form&gt;
&lt;p&gt;&lt;label for=&quot;title&quot;&gt; Title &lt;input  id=&quot;title&quot; type=&quot;text&quot; /&gt;&lt;/label&gt;&lt;/p&gt;
&lt;p&gt;&lt;label for=&quot;description&quot;&gt; Description &lt;input  id=&quot;description&quot; type=&quot;text&quot; /&gt;&lt;/label&gt;&lt;/p&gt;
&lt;p&gt;&lt;label for=&quot;when_it_happened&quot;&gt; Date/time &lt;input  id=&quot;when_it_happened&quot; type=&quot;text&quot; /&gt;&lt;/label&gt; time is in UTC&lt;/p&gt;
&lt;p&gt;&lt;input id=&quot;annotate&quot; type=&quot;button&quot; value=&quot;Annotate!&quot; /&gt;&lt;/p&gt;
&lt;/form&gt;

&lt;script type=&quot;text/javascript&quot;&gt;
var today = new Date();
var hour = today.getUTCHours();
if (hour &lt; 10) {
  hour = &quot;0&quot; + hour;
}
var minute = today.getUTCMinutes();
if (minute &lt; 10) {
  minute = &quot;0&quot; + minute;
}

//jQuery('#when_it_happened').datetimepicker({format:'Y-m-d\\TH:i:00.000\\Z', defaultTime : hour + ':' + minute });

var now = moment.tz('UTC').format('YYYY-MM-DD\\THH:mm:00.000\\Z');  
jQuery('#when_it_happened').val(now)
&lt;/script&gt;
&lt;p&gt;To setup the correct mapping on the server I run the following&lt;/p&gt;
 
&lt;pre&gt;
# delete all
curl -XDELETE  &quot;http://graphite.example.com:9200/events/&quot;
 
# create mapping
curl -XPUT graphite.example.com:9200/events -d '{
    &quot;settings&quot;: {
        &quot;index.number_of_shards&quot;: 1,
        &quot;index.number_of_replicas&quot;: 0
    },
    &quot;mappings&quot;: {
        &quot;prod&quot;: {
            &quot;_timestamp&quot;: {
                &quot;enabled&quot;: &quot;true&quot;
            },
            &quot;properties&quot;: {
                &quot;title&quot;: {
                  &quot;type&quot;: &quot;string&quot;
                },
                &quot;description&quot;: {
                  &quot;type&quot;: &quot;string&quot;
                },
                &quot;when_it_happened&quot;: {
                    &quot;type&quot;: &quot;date&quot;,
                    &quot;format&quot;: &quot;yyyy-MM-dd'&quot;'T'&quot;'HH:mm:ss.SSSZ&quot;
                }
            }
        }
    }
}
'
# test creating a record
curl -XPOST graphite.example.com:9200/events/prod/ -d '{
    &quot;when_it_happened&quot;: &quot;2015-04-27T18:30:14.000Z&quot;, &quot;title&quot; : &quot;fake deploy&quot;, &quot;description&quot; : &quot;Imagine that a deploy happened here&quot;
}
'

# check mapping
GET &quot;http://graphite.example.com:9200/events/_mapping?pretty=true&quot;

# test search
curl -XPOST  &quot;http://graphite.example.com:9200/events/_search?pretty=true&quot; -d '{&quot;fields&quot;:[&quot;when_it_happened&quot;],&quot;query&quot;:{&quot;filtered&quot;:{&quot;query&quot;:{&quot;bool&quot;:{&quot;should&quot;:[{&quot;query_string&quot;:{&quot;query&quot;:&quot;*&quot;}}]}},&quot;filter&quot;:{&quot;bool&quot;:{&quot;must&quot;:[{&quot;range&quot;:{&quot;when_it_happened&quot;:{&quot;from&quot;:&quot;now-8y&quot;,&quot;to&quot;:&quot;now+8y&quot;}}}]}}}},&quot;size&quot;:100}'

 
&lt;/pre&gt;
 
&lt;/body&gt;
&lt;/html&gt;

</code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Import Data to Graphite From Munin]]></title>
    <link href="http://www.practicalweb.co.uk/blog/2014/11/28/import-data-to-graphite-from-munin/"/>
    <updated>2014-11-28T18:26:44+00:00</updated>
    <id>http://www.practicalweb.co.uk/blog/2014/11/28/import-data-to-graphite-from-munin</id>
    <content type="html"><![CDATA[<p>To convert data from munin/rrd to graphite/whisper you need to use the <code>rrdwhisper</code> tool which in centos is part of the python-whisper package.</p>

<p>If you want to change the data retention/resolution properties in graphite you will also need to resize the files as well.</p>

<p>Note that Graphites reads from /etc/carbon/storage-aggregation.conf and /etc/carbon/storage-schemas.conf to select the retention and aggregation policies for <em>new</em> data, but since these are set in the file at creation time editing the config file has no effect on existing files (or those created with whisper2rrd).</p>

<p>Recent data is stored at 10 second intervals, when it becomes older 6 lots of 10 second data get aggregated to make a one minute interval. I think this aggregation also happens on newer data if I select say data for the last 2 days since this time period include data at the lower resolution - all the data I get is at this lower resolution.</p>

<p>When this data is aggregated it can be averaged; in my case I&rsquo;m measuring how long something takes - and average is right. But say I was counting something then I&rsquo;d want to know the total over a minute - sum - not average, and if I was recording peaks then I&rsquo;d want the max.</p>

<p>The xFilesFactor as I understand it tells graphite to ignore all the data for an interval if there are too many nulls, but since my original data is at a lower resolution I have loads of nulls and don&rsquo;t want to ignore anything - so I&rsquo;m setting this to zero and my import seems to work well at different scales and on both old and new data.</p>

<pre><code class="bash">
for rrd in *rrd ; do 
    rrd2whisper --xFilesFactor=0.0 --aggregationMethod=average $rrd
    whisper-resize  --xFilesFactor=0.0 --aggregationMethod=average --nobackup ${rrd%.rrd}_42.wsp   10s:6h 1min:6d 10min:1800d  
done


[ -d /var/lib/carbon/whisper/munin ] || sudo -u carbon mkdir -p /var/lib/carbon/whisper/munin
sudo mv *wsp /var/lib/carbon/whisper/munin
sudo chown -R carbon:carbon  /var/lib/carbon/whisper/munin
</code></pre>

<p>This script excerpt deals with the basic conversion - I also needed to convert the long filenames munin used to a nested directory structure used by graphite.</p>

<p>That conversion will depend on your use case - if you look at the files stored under /var/lib/carbon/whisper and /var/lib/munin you should be able to see the pattern.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Graphite Statsd/bucky and Collectd]]></title>
    <link href="http://www.practicalweb.co.uk/blog/2014/11/19/graphite-statsd-slash-bucky-and-collectd/"/>
    <updated>2014-11-19T10:09:23+00:00</updated>
    <id>http://www.practicalweb.co.uk/blog/2014/11/19/graphite-statsd-slash-bucky-and-collectd</id>
    <content type="html"><![CDATA[<blockquote><p>Graphite is a highly scalable real-time graphing system.</p></blockquote>

<p>It took me a while to realise but the data input to graphite is <em>incredibly</em> simple</p>

<p>The message input format is just</p>

<pre><code>metric_path value timestamp\n

So for example, "foo.bar.baz 42 74857843"
</code></pre>

<p>Wow: just a label the number you want to store and the timestamp it relates to.</p>

<p>That&rsquo;s really basic, there is nothing there about what kind of data it is, no difference between something you want to count (say page hits) and a number you want to average (like load)</p>

<p><a href="https://github.com/etsy/statsd/blob/master/docs/graphite.md">Configuring Graphite for StatsD</a> is a <em>very</em> important doc to read if you want to use these tools together.</p>

<p>The default config in graphite keeps data at 1 minute resolution for 1 day <strong>and then discards it</strong> and if you are sending data to graphite every 10 seconds graphite has to figure out how to convert 6 data points (or some nulls and some data) to 1 data point for the minute.</p>

<p>You really need the statsd specific config to ensure counts are not averaged and infrequent data is not dropped.</p>

<p>I needed to install on Centos using just official and EPEL packages, I wanted to use collected to gather system metrics and while version 5 can log direct to graphite version 4 ships with Centos 6.5 and that can&rsquo;t log direct.</p>

<p>In any case I wanted to use statsd to allow easy logging of custom data from production code, the original written by etsy is a node service and probably doesn&rsquo;t run with stock packages on Centos,</p>

<p>Centos does provide a python-bucky package which acts both as a statsd server and as a bridge to collectd.</p>

<p>The full list of packages I needed is</p>

<ul>
<li>graphite-web</li>
<li>graphite-web-selinux</li>
<li>python-carbon</li>
<li>python-whisper</li>
<li>collectd</li>
<li>python-bucky</li>
</ul>


<p>Apache config</p>

<pre><code class="apache">
&lt;VirtualHost *:80&gt;
  ServerName graphite.example.com

  ## Vhost docroot
  DocumentRoot "/var/www/html"
  ## Alias declarations for resources outside the DocumentRoot
  Alias /grafana/ "/var/www/grafana/"
  Alias /media/ "/usr/lib/python2.6/site-packages/django/contrib/admin/media/"



  ## Directories, there should at least be a declaration for /var/www/html


  &lt;Directory "/var/www/html"&gt;
    Options Indexes FollowSymLinks MultiViews
    AllowOverride None
    Order allow,deny
    Allow from all
  &lt;/Directory&gt;

  ## Load additional static includes


  ## Logging
  ErrorLog "/var/log/httpd/graphite.example.com_error.log"
  ServerSignature Off
  CustomLog "/var/log/httpd/graphite.example.com_access.log" combined



  WSGIImportScript /usr/share/graphite/graphite-web.wsgi application-group=%{GLOBAL} process-group=%{GLOBAL}
  WSGIScriptAlias / "/usr/share/graphite/graphite-web.wsgi"

  ## Custom fragment

    &lt;Location "/content/"&gt;
        SetHandler None
    &lt;/Location&gt;

    &lt;Location "/media/"&gt;
        SetHandler None
    &lt;/Location&gt;

&lt;/VirtualHost&gt;
</code></pre>

<p>Graphite Config</p>

<p>Storage-schames.conf</p>

<pre><code>[carbon]
pattern = ^carbon\.
retentions = 60:90d

[stats]
pattern = ^stats.*
retentions = 10s:6h,1min:6d,10min:1800d


# unsure if this is redundant - does .* match stats_counts ?
[stats_counts]
pattern = ^stats_counts.*
retentions = 10s:6h,1min:6d,10min:1800d


# collectd 
[com]
pattern = ^com.*
retentions = 10s:6h,1min:6d,10min:1800d

[default_1min_for_1day]
pattern = .*
retentions = 60s:1d
</code></pre>

<p>storage-aggregation.conf</p>

<pre><code>[min]
pattern = \.lower$
xFilesFactor = 0.1
aggregationMethod = min

[max]
pattern = \.upper(_\d+)?$
xFilesFactor = 0.1
aggregationMethod = max

[sum]
pattern = \.sum$
xFilesFactor = 0
aggregationMethod = sum

[count]
pattern = \.count$
xFilesFactor = 0
aggregationMethod = sum

[count_legacy]
pattern = ^stats_counts.*
xFilesFactor = 0
aggregationMethod = sum

[default_average]
pattern = .*
xFilesFactor = 0.3
aggregationMethod = average
</code></pre>

<p>Statsd caught me out with a debug mode that <em>only</em> prints to stdout and doesn&rsquo;t actually log any data to graphite, I expected debug mode to print out data in addition to regular duties.</p>

<p>I did need to make statsd listen on all networks instead of just localhost, and still need to wrap it properly as a service.</p>

<p>Edit collectd.conf to enable the plugins you want, the only problem I had here was collectd silently dying if I had a config error.</p>

<p>You need to setup an initial graphite users database</p>

<p>More details at <a href="http://obfuscurity.com/2012/04/Unhelpful-Graphite-Tip-4">http://obfuscurity.com/2012/04/Unhelpful-Graphite-Tip-4</a></p>

<pre><code class="bash">/usr/bin/python /usr/lib/python2.6/site-packages/graphite/manage.py syncdb
</code></pre>

<p>Writing this up now it all seems quite simple - but I haven&rsquo;t really found it so, I think the main problem has been understanding what graphite is actually doing, and not taking the trouble to optimise that config as a first step.</p>

<p>Pages I found useful</p>

<ul>
<li><a href="https://kevinmccarthy.org/blog/2013/07/18/10-things-i-learned-deploying-graphite/">https://kevinmccarthy.org/blog/2013/07/18/10-things-i-learned-deploying-graphite/</a></li>
<li><a href="http://blog.pkhamre.com/2012/07/24/understanding-statsd-and-graphite/">http://blog.pkhamre.com/2012/07/24/understanding-statsd-and-graphite/</a></li>
<li><a href="http://statsd.readthedocs.org/en/latest/types.html#counters">http://statsd.readthedocs.org/en/latest/types.html#counters</a></li>
<li><a href="http://code.hootsuite.com/accurate-counting-with-graphite-and-statsd/">http://code.hootsuite.com/accurate-counting-with-graphite-and-statsd/</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Grafana]]></title>
    <link href="http://www.practicalweb.co.uk/blog/2014/11/19/grafana/"/>
    <updated>2014-11-19T10:07:55+00:00</updated>
    <id>http://www.practicalweb.co.uk/blog/2014/11/19/grafana</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been playing with some new toys.</p>

<p>What motivated me was a desire to be better able to interpret load test data and performance metrics.</p>

<p>I love graphs, for me the visualisation they provide allows me to recognise patterns and figure out cause/effects massively faster than any other way.</p>

<p>In the past I&rsquo;ve mainly relied on Munin which is very easy to setup, and I&rsquo;ve even customised graphs. My most successful case was when two servers in a pool of four kept falling down, by graphing apache hits per second and severer load for all for servers on the same page - it provided convincing proof that the two servers which fell down did so under no extra load and at the exact same moment. It later turned out these two were VMs on the same host OS which was having previously unnoticed problems.</p>

<p>This visualisation transformed a conversation from one of what could or couldn&rsquo;t be wrong to acceptance and how to fix it.</p>

<p>But with Munin I had to define the graph and then collect the data - I had to wait for another outage.</p>

<p>I wanted to be able to compose graphs on the fly to test hypotheses with existing data - grab the data now and define the graphs to visualise what I want to see after the fact.</p>

<p>Enter <a href="http://play.grafana.org/">Grafana</a> I just love this tool, it allows me to compose graphs entirely on the fly, mixing and matching any data I want on the same graph, or multiple graphs on the same page.</p>

<p>With the <a href="http://graphite.readthedocs.org/en/latest/functions.html#graphite.render.functions.timeShift">timeshift</a> function I can even put say this weeks and last weeks data on the same graph for easy comparison.</p>

<p>I hope to work on some screenshots and maybe screencaps - the tool is so interactive it&rsquo;s hard to explain - for now go an play with it.</p>

<p>Grafana works by calling the json API of graphite-web, one thing that threw me at first was the <a href="http://grafana.org/docs/#graphite-&amp;-elasticsearch-setup-example">initial config example</a></p>

<pre><code class="json">datasources: {
  graphite: {
    type: 'graphite',
    url: "http://my.graphite.server.com:8080",
  },
},
</code></pre>

<p>I wasn&rsquo;t sure which server component I was meant to be connecting to on 8080, this is just the regular graphite-web service from apache - in my case on port 80.</p>

<p>It&rsquo;s also worth noting that <a href="graphite%20cannot%20exist%20in%20a%20subdirctory">https://github.com/graphite-project/graphite-web/issues/223</a> at least not for the version I am running.</p>
]]></content>
  </entry>
  
</feed>
