<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Api | PracticalWeb Ltd]]></title>
  <link href="http://www.practicalweb.co.uk/blog/categories/api/atom.xml" rel="self"/>
  <link href="http://www.practicalweb.co.uk/"/>
  <updated>2015-02-20T16:16:20+00:00</updated>
  <id>http://www.practicalweb.co.uk/</id>
  <author>
    <name><![CDATA[Sean Burlington]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Github Jenkins Hook - Multiple Endpoints and API]]></title>
    <link href="http://www.practicalweb.co.uk/blog/2013/08/07/github-jenkins-hook-multiple-endpoints-and-api/"/>
    <updated>2013-08-07T00:00:00+01:00</updated>
    <id>http://www.practicalweb.co.uk/blog/2013/08/07/github-jenkins-hook-multiple-endpoints-and-api</id>
    <content type="html"><![CDATA[<p>I wanted to trigger multiple jenkins servers from a github hook.</p>

<p>I found <a href="https://github.com/github/github-services/pull/604M/">this pull request</a> which led me to look at the API</p>

<p>useful docs</p>

<ul>
<li><a href="http://developer.github.com/v3/repos/hooks">http://developer.github.com/v3/repos/hooks</a></li>
<li><a href="https://gist.github.com/caspyin/2288960">https://gist.github.com/caspyin/2288960</a></li>
</ul>


<p>My code</p>

<pre><code class="bash">  curl --user "me:mypassword" --request POST --data @jenkins.json  https://api.github.com/repos/myorg/myproject/hooks
</code></pre>

<p>here jenkins.json is like</p>

<pre><code class="json">
    {
      "name": "jenkins",
      "active": true,
      "events": [
        "push"
      ],
      "config": {
        "jenkins_hook_url": "http://jenkins.mydomain/github-webhook/"
      }
    }
</code></pre>

<p>What I found was that this just replaces my jenkins hook - which isn&rsquo;t what I wanted.</p>

<p>But the more I looked at the service hooks the more it looked like the jenkins one just passes a standard payload to a url, which is the same as the generic webhook, so I tried adding the jenkins webhook URL as a standard webhook ( you are allowed multiples of these) and that seems to work.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Delete Drupal View Programatically]]></title>
    <link href="http://www.practicalweb.co.uk/blog/2010/07/02/delete-drupal-view-programatically/"/>
    <updated>2010-07-02T00:00:00+01:00</updated>
    <id>http://www.practicalweb.co.uk/blog/2010/07/02/delete-drupal-view-programatically</id>
    <content type="html"><![CDATA[<p>Quick function to delete a view.</p>

<p>This is basically what the UI form submit does.</p>

<p>&lt;?php</p>

<p>function delete_view($name) {</p>

<pre><code>$view = views_ui_cache_load($name);
$view-&gt;delete();
views_object_cache_clear('view', $view-&gt;name);
</code></pre>

<p>}</p>

<p>?></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Drupal - the Missing API]]></title>
    <link href="http://www.practicalweb.co.uk/blog/2010/02/23/drupal-the-missing-api/"/>
    <updated>2010-02-23T00:00:00+00:00</updated>
    <id>http://www.practicalweb.co.uk/blog/2010/02/23/drupal-the-missing-api</id>
    <content type="html"><![CDATA[<p>
I was just reading this presentation on deploying Drupal 
</p>


<p>
http://www.slideshare.net/eaton/drupal-deployment-presentation
</p>


<p>
and noticed 
</p>


<p>
http://drupal.org/project/install_profile_api
</p>


<p>
Which seems to have a collection of API functions needed at install/upgrade time that are missing from Drupal (and contrib modules)
</p>


<p>
And even better this is great motivation to write more such functions myself instead of just using SQL hacks. 
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Drupal Has No API]]></title>
    <link href="http://www.practicalweb.co.uk/blog/2009/09/04/drupal-has-no-api/"/>
    <updated>2009-09-04T00:00:00+01:00</updated>
    <id>http://www.practicalweb.co.uk/blog/2009/09/04/drupal-has-no-api</id>
    <content type="html"><![CDATA[<p>
I&#8217;ve been using Drupal for a couple of years now, and know my way around it pretty well.
</p>


<p>
One of my biggest frustrations though is that it doesn&#8217;t really have an API.
</p>


<p>
Much of the functionality is only really available through the application, you can do things pretty easily by pointing and clicking, but try and automate part of this and you have to step through code, find form handlers, copy-paste parts of the functions and work out what parameters are required.
</p>


<p>
The example I found most recently was creating a translated version of a page.
</p>


<p>
My client is using a translation agency, we send them XML, they translate it and return the translated text in XML.Â 
</p>


<p>
So I start with an English page, send off an XML version, and when I get the XML translation back I need to add a new node related to the original.
</p>


<p>
But Drupal has no function &quot;translation_add()&quot; instead the functionality is embedded in &quot;translation_nodapi()&quot;.
</p>


<p>
If Drupal had an API there would be a well thought out set of functions to add, delete, and update translations of a node.
</p>


<p>
The name of Drupal&#8217;s documentation site http://api.drupal.org/ is misleading, this is just general documentation of Drupal functions, it isn&#8217;t an API. 
</p>


<p>
&nbsp;
</p>

]]></content>
  </entry>
  
</feed>
