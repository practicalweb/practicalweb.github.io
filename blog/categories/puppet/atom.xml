<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Puppet | PracticalWeb Ltd]]></title>
  <link href="http://www.practicalweb.co.uk/blog/categories/puppet/atom.xml" rel="self"/>
  <link href="http://www.practicalweb.co.uk/"/>
  <updated>2015-10-09T17:23:39+01:00</updated>
  <id>http://www.practicalweb.co.uk/</id>
  <author>
    <name><![CDATA[Sean Burlington]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Puppet vs Ansible]]></title>
    <link href="http://www.practicalweb.co.uk/blog/2015/03/13/puppet-vs-ansible/"/>
    <updated>2015-03-13T13:58:04+00:00</updated>
    <id>http://www.practicalweb.co.uk/blog/2015/03/13/puppet-vs-ansible</id>
    <content type="html"><![CDATA[<p>Some thoughts - I&rsquo;ve used puppet for a while and ansible more recently.</p>

<p>Ansible is easier to get started with</p>

<p>Puppet sequencing can be hard - and occasionally you get bugs appearing in odd places where there was a dependency that you hadn&rsquo;t noticed - but things happened to work OK untill some change</p>

<p>Puppet is faster - especially for a long set of config with a single change to apply.</p>

<p>Much nicer audit trail pushing puppet code to a branch - nice having a branch per env, hiera allows easy separation of data and code</p>

<p>Puppet has good logs - which can show the diff of any config change and are easy to centralise.</p>

<p>Puppet requires software on the server and a service or cronjob, Ansible needs ssh and full sudo access: it doesn&rsquo;t run commands in quite the regular way and the only way to allow it to work seems to be to allow unrestricted sudo access (a password may be used)</p>

<p>I really don&rsquo;t like running ansible from a local dev env, too easy to run uncommitted code that others can&rsquo;t see, no central audit trail, and easy to accidentally use the wrong inventory and push chnages to teh wrong place</p>

<p>I get the impression that it is harder with puppet than with ansible to reuse code quite as well - I feel like I&rsquo;m going to be bitten by Ansible&rsquo;s strict sequencing - but so far it&rsquo;s OK</p>

<p>Ansible gives you the ability run run a multi-machine deploy which puppet doesn&rsquo;t (you&rsquo;d use mcollective for this)</p>

<p>Much richer ecosystem of puppet modules than ansible ones at the time of writing.</p>

<p>I haven&rsquo;t used ansible tower,</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Puppet - Apache Virtualhost Docroot Provided by Rpm]]></title>
    <link href="http://www.practicalweb.co.uk/blog/2013/03/11/puppet-apache-virtualhost-docroot-provided-by-rpm/"/>
    <updated>2013-03-11T00:00:00+00:00</updated>
    <id>http://www.practicalweb.co.uk/blog/2013/03/11/puppet-apache-virtualhost-docroot-provided-by-rpm</id>
    <content type="html"><![CDATA[<p>This has been annoying to work out.</p>




<p>The <a href="https://forge.puppetlabs.com/puppetlabs/apache">puppet apache module</a> will by default create the document root for a virtualhost if it is not already defined. But since I wanted the documentroot to be managed by a custom   RPM I don&#8217;t have a reference to the actual directory in puppet.</p>




<p>It seems the thing to do is to create file named after the document root - but with an alternate path property. This way puppet/apache knows not to create the documentroot, and the one I make in puppet doesn&#8217;t then get in the way of the RPM one.</p>


<p><code></p>

<p>  apache::vhost { &lsquo;www.vagrant&rsquo;:
    priority        => &lsquo;10&rsquo;,
    port            => &lsquo;80&rsquo;,
    docroot         => &ldquo;/var/www/html/foo&rdquo;,
    docroot_owner   => &lsquo;root&rsquo;,
    docroot_group   => &lsquo;root&rsquo;,
    override        => &lsquo;All&rsquo;,
    require         => Package[&lsquo;foo&rsquo;],
  }</p>

<p>  file {&lsquo;/var/www/html/foo&rsquo;:
      path => &ldquo;/usr/share/doc/foo&rdquo;,
      content => &ldquo;Puppet needs a file with an object name of teh docroot defined, this is that dummy file, the real docroot is defined in an rpm\n &rdquo;,
      owner => root,
  }</p>

<p></code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vagrant / Puppet Project to Setup a RPM Build Server and Custom Yum Repository]]></title>
    <link href="http://www.practicalweb.co.uk/blog/2012/11/24/vagrant-puppet-project-to-setup-a-rpm-build-server-and-custom-yum-repository/"/>
    <updated>2012-11-24T00:00:00+00:00</updated>
    <id>http://www.practicalweb.co.uk/blog/2012/11/24/vagrant-puppet-project-to-setup-a-rpm-build-server-and-custom-yum-repository</id>
    <content type="html"><![CDATA[<p>I&#8217;ve published a project on github <a href="https://github.com/practicalweb/vagrant-rpmbuild">https://github.com/practicalweb/vagrant-rpmbuild</a></p>




<p>The project contains a Vagrant config file, and Puppet manifests that together with an appropriate basebox will create a VM setup to build RPMS and host them on a Custom Yum repository</p>




<p>To run this</p>




<ol>
<li><p>Install vagrant <a href="http://vagrantup.com/">http://vagrantup.com/</a> (on Ubuntu just <code>apt-get install vagrant</code>)</p></li>
<li><p>Install Virtualbox <a href="https://www.virtualbox.org/wiki/Downloads">https://www.virtualbox.org/wiki/Downloads</a> (again on Ubuntu <code>apt-get install virtualbox</code>)</p></li>
<li><p>Clone this reporitory <code>git clone git@github.com:practicalweb/vagrant-rpmbuild.git</code></p></li>
<li><p>run <code>vagrant up</code> from the root of your cloned repository (NB the first time you do the a 600Mb base image will be downloaded)</p></li>
<li><p>run <code>vagrant ssh</code> to connect to the new VM  </p></li>
<li><p>To build the demo rpm and publish it locally run <code>/vagrant/build-rpm.sh</code> the key password is &#8216;secret&#8217;</p></li>
<li><p>To install the demo package on the VM run <code>sudo yum install demo</code></p></li>
</ol>


<p>There is a Vagrant port forwarding rule, and firewall setup to allow the yum repo to be accessed on the host machine as http://localhos:8088/repo</p>




<p>This project is intended as documentation of how to setup this build environment, and as a starting point for further customisation, I&#8217;m sure it isn&#8217;t perfect, I hope it is useful.</p>




<p>It&#8217;s all released under GPL with no promise that it is fot for any purpose - see LICENCE.txt </p>




<p>I&#8217;ve tried to group the code logically, there are 4 modules</p>




<dl>
<dt>base</dt>
    <dd>This contains some generic stuff, pulling in a couple of packages not in the minimal centos install but that I find essential.</dd><dd>
    </dd><dd>The idea is that I would use this base module on every server I setup.</dd>

  

<dt>rpmbuild</dt>
    <dd>Just what is needed to actually build the RPMs</dd><dd>
  
  </dd>

<dt>tomyumrepo</dt>
     <dd>Just what is needed to serve a custom yum repository, the packages could be built elsewhere</dd>
  <dt>usemyrepo</dt>
     <dd>Config to setup a machine to consume yum packages.</dd>
     <dd>This could be added to the setup for any machine that needs to use the custom packages</dd>
</dl>


<p>I&#8217;ve included a minimal RPM project to get things rolling, it just installs a single text file.</p>




<p>I&#8217;ve built a GPG key to sign packages with, and also included a script ( generate-gpg-key.sh ) which shows how to generate a new one, edit this file to make your own key.</p>




<p>The base box I&#8217;ve defined is a minimal install of CentOS 6.3 (64 bit) with the dependencies required for vagrant.</p>




<p>Base boxes are quite a heavy download, but you only need to do it once and then you can have as many VMs as you want based on them, because the base is minimal and all extra config is done in puppet each of these VMs can serve a very differnt purpose - just by changing the Vagrantfile and puppet config.</p>




<p>The Vagrantfile runs puppet in standalone mode, but the modules <em>should</em> work with a client/server Puppet setup - so hopefully migrating the Vagrant setup to any Puppet manged system should be easy.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Satellite vs Puppet]]></title>
    <link href="http://www.practicalweb.co.uk/blog/2012/11/20/satellite-vs-puppet/"/>
    <updated>2012-11-20T00:00:00+00:00</updated>
    <id>http://www.practicalweb.co.uk/blog/2012/11/20/satellite-vs-puppet</id>
    <content type="html"><![CDATA[<p>I&#8217;ve been using Puppet for a little while and am now working on a project that will be using RedHat&#8217;s Satellite (the upstream project is Spacewalk).</p>




<p>I haven&#8217;t really used puppet in anger on production systems yet, I&#8217;m referring to the open source edition of Puppet, and have only read about Satellite, but I didn&#8217;t find much comparison out there so thought it worth writing up what I&#8217;ve found.</p>




<p><p>They key differences that strike me are<p></p>

<p><ul>
<li>Satellite is RedHat/Centos only, Puppet works on multiple distributions, and even on Windows to some extent</li>
<li>Satellite is primarily a GUI driven system whereas Puppet is primarily text configuration (puppet has a web dashboard but it&rsquo;s really just a log viewer)</li></p>

<p><li>Satellite can manage provisioning of new systems (I&rsquo;m using openstack for provisioning new VMs anyway, Razor is said to work well with Puppet for provisioning)</li></p>

<p><li>Satellite manages configuration via simple templates with limited variable use, Puppets templates are fully scriptable</li></p>

<p><li>Puppet has a very rich dependency system (eg you can trigger an Apache restart whenever a configuration change occurs</li></p>

<p><li>Satellite uses a mixture of technologies (python, Java, C) puppet is written in Ruby.</li></p>

<p><li>Puppet is available as a package on Ubuntu/debian systems, on Redhat/centos it has to be installed via the EPEL repo, pulling in extra dependencies</li></p>

<p></ul></p>

<p><p>Personally I much prefer puppet&rsquo;s approach, it&rsquo;s easy to keep all the config in git and test changes in a dev env before rolling out.</p></p>

<p><p>I love puppets declarative approach, and the ability to chain dependencies</p></p>

<p><p>That said I&rsquo;m really looking forward to playing with Satellite, finding out how provisioning works when all the servers are VMs and seeing how we manage the dependency tracking</p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Build a Centos 6 Base Box for Vagrant]]></title>
    <link href="http://www.practicalweb.co.uk/blog/2012/10/16/how-to-build-a-centos-6-base-box-for-vagrant/"/>
    <updated>2012-10-16T00:00:00+01:00</updated>
    <id>http://www.practicalweb.co.uk/blog/2012/10/16/how-to-build-a-centos-6-base-box-for-vagrant</id>
    <content type="html"><![CDATA[<hr />

<p>Update : <a href="/blog/2014/10/28/creating-new-vagrant-base-boxes-with-veewee/">Creating new Vagrant base boxes with Veewee</a></p>

<p>I originally went down a manual route as I wanted to understand the process, and since I&rsquo;m familiar with manual installs this was the easiest path for me at the time.</p>

<p>You&rsquo;re probably better off using <a href="https://github.com/jedi4ever/veewee">veewee</a> or <a href="http://www.packer.io/">packer</a></p>

<hr />

<p>I&rsquo;ve been playing with <a href="http://vagrantup.com/">vagrant</a> a bit lately but of course the first thing I wanted was something they say is for advanced users only, creating my own base box.</p>

<p>I&rsquo;m not sure why this is given such a stark warning, it is perhaps a little long, but it wasn&rsquo;t too difficult, and given that I want to match a client install as closely as possible I want centos 6.2 (client has RHEL6.2)</p>

<p>There is a list of <a href="http://www.vagrantbox.es/">pre-built boxes</a> but I personally don&rsquo;t know how trustworthy those urls are.</p>

<p>So here is what I did (as well as I can reconstruct from notes) with a few comments.</p>

<p>I&rsquo;ve tried to keep this quite detailed so that it should achievable even if you don&rsquo;t regularly install new OS&rsquo;s</p>

<h2>On your local dev machine</h2>

<p>I&rsquo;m running Ubuntu 12.04.1 LTS locally</p>

<p>I have installed</p>

<pre><code>i A virtualbox                                                                                                                      - x86 virtualization solution - base binaries                                                                                              
i A virtualbox-dkms                                                                                                                 - x86 virtualization solution - kernel module sources for dkms                                                                             
i A virtualbox-fuse                                                                                                                 - x86 virtualization solution - virtual filesystem                                                                                         
i   virtualbox-guest-additions-iso                                                                                                  - guest additions iso image for VirtualBox                                                                                                 
i   virtualbox-ose-dkms                                                                                                             - transitional package for virtualbox-dkms                                                                                                 
i   virtualbox-ose-fuse                                                                                                             - transitional package for virtualbox-fuse                                                                                                 
i   virtualbox-ose-qt                                                                                                               - transitional package for virtualbox-qt                                                                                                   
i A virtualbox-qt                                                                                                                   - x86 virtualization solution - Qt based user interface  


i   vagrant                                                                                                                         - Tool for building and distributing virtualized development environments                                                                  
</code></pre>

<pre><code>wget http://mirrors.ukfast.co.uk/sites/ftp.centos.org/6.3/isos/i386/CentOS-6.3-i386-minimal.iso
</code></pre>

<h2>In Virtualbox GUI</h2>

<p><img src="/sites/default/files/step-1.jpeg" title="[step 1]" ></p>

<p>Create a new VM</p>

<p><img src="/sites/default/files/step-2.jpeg" title="[step 2]" ></p>

<p>Set OS to Linux and version to Red Hat</p>

<p>Call it &ldquo;vagrant-centos62&rdquo; (ie vagrant-${osname}</p>

<p><img src="/sites/default/files/step-3.jpeg" title="[step 3]" ></p>

<p>Set memory to 512Mb (this is just a default and can be altered later)</p>

<p><img src="/sites/default/files/step-4.jpeg" title="[step 4]" ></p>

<p>Create a new virtual hard disk</p>

<p><img src="/sites/default/files/step-5.jpeg" title="[step 5]" ></p>

<p>Use the default virtualbox format</p>

<p><img src="/sites/default/files/step-6.jpeg" title="[step 6]" ></p>

<p>Choose dynamically sized (This means the VM will see a large disk - but the space won&rsquo;t be used on your real hard disk - unless the virtual one has actual data on it)</p>

<p><img src="/sites/default/files/step-7.jpeg" title="[step 7]" ></p>

<p>Make it 32Gb in size (which should be big enough for most tasks)</p>

<p><img src="/sites/default/files/step-8.jpeg" title="[step 8]" ></p>

<p>Click create</p>

<h3>Virtualbox settings for this new VM</h3>

<p><img src="/sites/default/files/step-9.jpeg" title="[step 9]" ></p>

<p>Disable audio support (not normally needed for a development VM)</p>

<p><img src="/sites/default/files/step-10.jpeg" title="[step 10]" ></p>

<p>Same for USB</p>

<p><img src="/sites/default/files/step-11.jpeg" title="[step 11]" ></p>

<p>In Storage settings choose a virtual CD - and broswe to the iso you downloaded earlier.</p>

<p>Start the new VM</p>

<h2>In the Install process</h2>

<p>NB I don&rsquo;t show every single step here, as I got bored with all the confirmation screens. Hopefully the ones I mised are obvious enough.</p>

<p><img src="/sites/default/files/step-13.jpeg" title="[step 13]" ></p>

<p>Select to install a new OS</p>

<p><img src="/sites/default/files/step-14.jpeg" title="[step 14]" ></p>

<p>Re-initialize the hard drive (this is just the one on the VM that has never been used)</p>

<p><img src="/sites/default/files/step-15.jpeg" title="[step 15]" ></p>

<p>Set the root password to &ldquo;vagrant&rdquo; (and remember it for later)</p>

<p><img src="/sites/default/files/step-16.jpeg" title="[step 16]" ></p>

<p>Accept defaults for partitioning the disk, &ldquo;replace linux system&rdquo;</p>

<p><img src="/sites/default/files/step-17.jpeg" title="[step 17]" ></p>

<p>Write changes to disk</p>

<p><img src="/sites/default/files/step-18.jpeg" title="[step 18]" ></p>

<p>Reboot the VM</p>

<h2>In the VM</h2>

<p>So now thew new VM is up and running, we just need to prepare it for vagrant</p>

<p>Oddly centOS/RHEL network interfaces are not enabled by default, we need to change this.</p>

<pre><code class="bash">vi /etc/sysconfig/network-scripts/ifcfg-eth0 
</code></pre>

<p>set ONBOOT=&ldquo;yes&#8217; and BOOTPROTO=dhcp</p>

<p>Start the network
<code>ifup eth0</code></p>

<p>Install some packages we need to get Virtualbox additions to work (do this before rebooting). ALso it is important to update - to ensure the kernel in use matches the kernel-devel package</p>

<pre><code class="bash">yum update
yum install gcc make kernel-devel kernel-headers perl
</code></pre>

<p>Now shut down the VM a moment, and <b>in your local system</b> run</p>

<pre><code class="bash">VBoxManage modifyvm "vagrant-centos62" --natpf1 "guestssh,tcp,,2222,,22"
</code></pre>

<p>This will open an ssh port on localhost to the new VM (NB this can also be done via the GUI in advanced options on the network config).</p>

<p>Now start the VM again, and once booted, in the VM window menu, click &ldquo;Devices&rdquo; and &ldquo;Install guest additions&rdquo;</p>

<p>back in your local system again run
<code>ssh -p2222 root@localhost</code></p>

<p>Great so now we have root on the new machine, in your normal terminal and it should be possible to copy-paste the following commands</p>

<pre><code class="bash">mount /dev/cdrom /mnt/
sh /mnt/VBoxLinuxAdditions.run
</code></pre>

<p>errors related to KERN_DIR mean you don&rsquo;t have a matching running kernel and kerne-devel versions - check the update, install reboot steps above</p>

<p>Errors building openGL and windows drivers are expected (there is no windows system) these error messages don&rsquo;t mean the process failed.</p>

<p>Test that the additions are installed, the following command should run and print out some system facts</p>

<p><code>VBoxControl  guestproperty enumerate</code></p>

<p>Create vagrant user, group vagrant, password vagrant.</p>

<pre><code class="bash">groupadd admin
useradd -G admin -p $(openssl passwd -1 vagrant) vagrant
</code></pre>

<p>Install and configure sudo for vagrant user to have passwordless sudo powers</p>

<pre><code class="bash">yum -y install sudo

echo '
Defaults    env_keep += SSH_AUTH_SOCK 
%admin ALL=NOPASSWD: ALL
Defaults:vagrant !requiretty
' &amp;gt; /etc/sudoers.d/vagrant

chmod 0440 /etc/sudoers.d/vagrant

# the above for copy-paste convenience NEVER do this on a remote machine - use visudo instead
</code></pre>

<p>ssh with sudo commands should work, only asking a password for login (not again for sudo) from you local system try</p>

<pre><code>ssh -p2222 vagrant@localhost "sudo ls /"
</code></pre>

<p>Add vagrant&rsquo;s public key so vagrant user can ssh without password.</p>

<pre><code class="bash">sudo -u vagrant mkdir /home/vagrant/.ssh 
sudo -u vagrant curl -k https://raw.github.com/mitchellh/vagrant/master/keys/vagrant.pub &gt; /home/vagrant/.ssh/authorized_keys
chmod 0755 /home/vagrant/.ssh
chmod 0644 /home/vagrant/.ssh/authorized_keys
</code></pre>

<p>These keys are reccomended for publically distributable base boxes, the keys are included in the vargant programs and so login &lsquo;just works&rsquo; for anyone using vagrant. However this is not secure and these keys should only be allowed if your vagrant systems will be secured by a private network. If the boxes will be public use secure keys and and then specify the private key you created by setting config.ssh.private_key_path.</p>

<p>Install the Puppet Repository</p>

<p>According to the [official documentation}(<a href="http://vagrantup.com/v1/docs/base_boxes.html">http://vagrantup.com/v1/docs/base_boxes.html</a>)</p>

<p><blockquote><p>Chef and Puppet for provisioning support<br/>&hellip; are absolutely required of a base box in order to work properly with Vagrant.</p></blockquote></p>

<p>However this appears to me to be talking about a requirment for base boxes to be publically distributed, if you are building a base box for your own team I can&rsquo;t see why you would need either puppet or chef unless you will actually use them, but I may be wrong on this. The following instrcutions detail how to install both (on centos)</p>

<pre><code class="bash">echo '[puppetlabs]
name=Puppet Labs Packages
baseurl=http://yum.puppetlabs.com/el/$releasever/products/$basearch/
enabled=1
gpgcheck=1
gpgkey=http://yum.puppetlabs.com/RPM-GPG-KEY-puppetlabs
' &gt;  /etc/yum.repos.d/puppet.repo


# Install the EPEL x86_64 YUM Repository

rpm -Uvh http://download.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-7.noarch.rpm


# Install the Puppet Master packages (I'm not 100% sure if this is striclty required if you don't use the puppet master provisioner)

yum -y install puppet-server

#Install the Puppet Client packages

yum -y install puppet
</code></pre>

<p>If you want to use chef</p>

<pre><code class="bash">rpm -Uvh http://rbel.frameos.org/rbel6

# Install Ruby and other development tools:
yum install ruby ruby-devel ruby-ri ruby-rdoc ruby-shadow gcc gcc-c++ automake autoconf make curl dmidecode

# On RHEL 6 you will need to add the "RHEL Server Optional" channel subscription for this command to succeed without missing dependencies.

#We prefer to install RubyGems from source rather than use the OS-provided version (if any), as it is cross platform, so we know what to expect.
Install RubyGems
cd /tmp
curl -O http://production.cf.rubygems.org/rubygems/rubygems-1.8.10.tgz
tar zxf rubygems-1.8.10.tgz
cd rubygems-1.8.10
ruby setup.rb --no-format-executable

# Install Chef Gem

gem install chef --no-ri --no-rdoc
</code></pre>

<p>Clean up (freeing up space to make the final box smaller)</p>

<pre><code class="bash">yum remove gcc make kernel-devel kernel-headers perl
yum clean all
# TODO add more cleanup steps eg ruby tarballs, kernel-devel probably isn't needed after vbox additions is built etc
</code></pre>

<p>Finally shut down the VM, package the box and add it to your vagrant boxes.
On your local dev machine</p>

<pre><code class="bash">vagrant package --output centos62.box --base vagrant-centos62
vagrant box add centos62 centos62.box
vagrant box list # this should show the new box
</code></pre>

<p>Now you can quickly create a Vagrant VM</p>

<pre><code class="bash">mkdir vagrant_test
cd vagrant_test
vagrant init centos62
vagrant up
# wait while it boots
vagrant ssh
</code></pre>
]]></content>
  </entry>
  
</feed>
