<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Postgresql | PracticalWeb Ltd]]></title>
  <link href="http://www.practicalweb.co.uk/blog/categories/postgresql/atom.xml" rel="self"/>
  <link href="http://www.practicalweb.co.uk/"/>
  <updated>2014-11-19T14:55:09+00:00</updated>
  <id>http://www.practicalweb.co.uk/</id>
  <author>
    <name><![CDATA[Sean Burlington]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SQL Greatest and Least]]></title>
    <link href="http://www.practicalweb.co.uk/blog/2009/07/21/sql-greatest-and-least/"/>
    <updated>2009-07-21T00:00:00+01:00</updated>
    <id>http://www.practicalweb.co.uk/blog/2009/07/21/sql-greatest-and-least</id>
    <content type="html"><![CDATA[<p>
Most of the time I can get what I want out of SQL using the standard aggregate functions, but today I needed to find the latest timestamp from any one of three columns.
</p>


<p>
I achieved this using the GREATEST() function, it&#8217;s not party of the SQL standard but is commonly available.
</p>


<p>
GREATEST(<em>value</em> [<span class="OPTIONAL">, &#8230;</span>])<br />
</p>


<pre class="SYNOPSIS">
LEAST(<em>value</em> [<span class="OPTIONAL">, ...</span>])
</pre>


<p>
The GREATEST and LEAST
functions select the largest or smallest value from a list of any
number of expressions. 
</p>


<p><br /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adding More Data Types to Schema API for Drupal 7]]></title>
    <link href="http://www.practicalweb.co.uk/blog/2009/06/07/adding-more-data-types-to-schema-api-for-drupal-7/"/>
    <updated>2009-06-07T00:00:00+01:00</updated>
    <id>http://www.practicalweb.co.uk/blog/2009/06/07/adding-more-data-types-to-schema-api-for-drupal-7</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve written a patch for Drupal 7 to enable date and time data types to be defined for the schema API.</p>

<p><a href="http://drupal.org/node/200953">http://drupal.org/node/200953</a></p>

<p>Update : <a href="https://www.drupal.org/node/866340">it got removed</a></p>

<!--break-->


<p>There seems to be some resistance to this idea due to concerns about compatibility between database versions (Drupal now supports MySQL, PostgreSQL and sqlite).</p>

<p>Personally I don&rsquo;t think Drupal can afford to work at lowest common denominator level if the aim is to be a serious option for the enterprise</p>

<p>Most professionally developed Drupal sites will have some (maybe a lot of) custom coding - this code is written with full awareness of which database will be used - and vendor specific SQL may be appropriate.</p>

<p>For publicly available modules vendor neutral code is desirable but can&rsquo;t be guaranteed with the current schema API.</p>

<p>Sqlite is never going to be able to do all the things &lsquo;real&rsquo; databases can do, there may be some cases that some of the work can be done in PHP instead, or it may be that some modules just won&rsquo;t work for all systems.</p>

<p>Having said all this date and time data types are pretty standard stuff and hopefully my patch can be included in Drupal without rocking the boat.</p>

<p>I used a git mirror of the Drupal repository to develop this patch, and I&rsquo;m pretty impressed with git - it is blazingly fast - it was great to be able to make local commits - and then to &lsquo;rebase&rsquo; these wrapping several small commits into one really cleanup up my repository history.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Restoring an Old Postgresql Database]]></title>
    <link href="http://www.practicalweb.co.uk/blog/2008/01/16/restoring-an-old-postgresql-database/"/>
    <updated>2008-01-16T00:00:00+00:00</updated>
    <id>http://www.practicalweb.co.uk/blog/2008/01/16/restoring-an-old-postgresql-database</id>
    <content type="html"><![CDATA[<p>I’ve just had cause to restore a two year old backup of a database I haven’t used in a while</p>

<div class="post-entry">
<p>
Since then postgresql (on Debian at least) has added the option to
have multiple ‘clusters’ and multple versions running on the same
machine.
</p>
<p>
Fortunately the old version (7.4) was still available<br />
</p>
<p>
Steps
</p>
<ul>
    <li>restore /var/lib/postgresql/data</li>
    <li>restore /etc/postgresql</li>
    <li>mkdir /var/lib/postgresql/7.4</li>
    <li>mv /var/lib/postgresql/data /var/lib/postgresql/7.4/</li>
    <li>chown -R postgres.postgres  /var/lib/postgresql/7.4/</li>
    <li>pg_createcluster 7.4 data (this moves the old data into the new structure)</li>
    <li>pg_upgradecluster 7.4 data (upgrade the data to the latest postgres version installed)</li>
</ul>
<p>
Other issues: my old data was in a character set I didn’t have installed as I now use UTF8
</p>
<p>
I had to add en_GB ISO-8859-1 to /etc/locale.gen
</p>
<p>
and run locale-gen
</p>
<p>
But I now have access to my old data in both old and new server
versions (I’ll probably delete the old one but it might be useful for
testing)
</p>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Full Text Searching on PostgreSQL With Tsearch2]]></title>
    <link href="http://www.practicalweb.co.uk/blog/2005/08/09/full-text-searching-on-postgresql-with-tsearch2/"/>
    <updated>2005-08-09T00:00:00+01:00</updated>
    <id>http://www.practicalweb.co.uk/blog/2005/08/09/full-text-searching-on-postgresql-with-tsearch2</id>
    <content type="html"><![CDATA[<p>I’ve just been experimenting with text searches: <a href="http://www.sai.msu.su/%7Emegera/postgres/gist/tsearch/V2/docs/tsearch-V2-intro.html"><a href="http://www.sai.msu.su/~megera/postgres/gist/tsearch/V2/docs/tsearch-V2-intro.html">http://www.sai.msu.su/~megera/postgres/gist/tsearch/V2/docs/tsearch-V2-intro.html</a></a></p>

<div class="post-entry">
<p>
It’s worth noting that most of the commands in the above tutorial
assume you are running as the database superuser, this is required to
run the setup script but then you can grant permission for an ordinary
user for the search tables (in the public schema names starting pg_ts_)
</p>
<p>
The search will only match words that start with the search term,
but is very fast and can search over several columns by maintaining a
combined index.
</p>
</div>

]]></content>
  </entry>
  
</feed>
