<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ckan | PracticalWeb Ltd]]></title>
  <link href="http://www.practicalweb.co.uk/blog/categories/ckan/atom.xml" rel="self"/>
  <link href="http://www.practicalweb.co.uk/"/>
  <updated>2016-04-05T15:29:32+01:00</updated>
  <id>http://www.practicalweb.co.uk/</id>
  <author>
    <name><![CDATA[Sean Burlington]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Drupal Module for CKAN Integration]]></title>
    <link href="http://www.practicalweb.co.uk/blog/2010/02/24/drupal-module-for-ckan-integration/"/>
    <updated>2010-02-24T00:00:00+00:00</updated>
    <id>http://www.practicalweb.co.uk/blog/2010/02/24/drupal-module-for-ckan-integration</id>
    <content type="html"><![CDATA[<p>Here&rsquo;s a basic Drupal Module that pulls CKAN data into Drupal.</p>

<p>It provides a simple search interface - when the user views a CKAN package for the first time a corresponding node is created.</p>

<p>When this node is then viewed Drupal loads the package details - I&rsquo;m only displaying notes and title here as I&rsquo;ve run out of time tonight - but the rest of the data is there.</p>

<p>You can then have user comments, voting, etc on these pages.</p>

<p>This is fairly quickly put together code and it&rsquo;s incomplete - but it should be enough to get people started - if there&rsquo;s interest I&rsquo;ll carry on with this so please add comments.</p>

<p>I&rsquo;ve created a github repository for it and I&rsquo;ll start using the issue tracker there.</p>

<p><a href="http://github.com/practicalweb/drupal-ckan">http://github.com/practicalweb/drupal-ckan</a></p>

<p>&lt;?php</p>

<p>/<em>*
 * @file
 * A Module to Integrate CKAN and Drupal.
 *
 * This works by
 *
 *   1. providing a serach and listing interface to CKAN with links to this Drupal site
 *   2. using a wildcard menu handler to match these links in the first instance
 *   3. this loads the packages and creates matching nodes (storing the ckan name)
 *   4. the node has a url alias which overrides the wildcard match
 * <br/>
 *   Now we have Drupal nodes which can have user commments associated with them, fivestar votes etc&hellip;
 *
 * @author Sean Burlington www.practicalweb.co.uk
 * @copyright PracticalWeb Ltd
 * @license <a href="http://opensource.org/licenses/gpl-license.php">http://opensource.org/licenses/gpl-license.php</a> GNU Public License
 *
 </em>/</p>

<p>function ckan_menu(){
    $items = array();</p>

<pre><code>// link to the search form page
$items['ckan_search'] = array(
'title'           =&gt; t('Search CKAN'),
'page callback'   =&gt; 'drupal_get_form',
'page arguments'  =&gt; array('ckan_search_form'),
'access callback' =&gt; TRUE,
);

$items['ckan/search/%'] = array(
'page callback'     =&gt; 'ckan_search_results_page',
'page arguments'    =&gt; array(2),
'access arguments'  =&gt; array('access content'),
'type'              =&gt; MENU_CALLBACK,
);

$items['ckan/data/%'] = array(
'page callback'   =&gt; 'ckan_new',
'page arguments'  =&gt; array(2),
'access arguments' =&gt; array('access content'),
'type'            =&gt; MENU_CALLBACK,
);


return $items;
</code></pre>

<p>}</p>

<p>/<em>*
 * Gets the ckan Object
 * Initialises it in one central place reusing it if needed.
 *<br/>
 * @return Ckan $ckan
 </em>/
function ckan_ckan(){
    static $ckan=null;
    if (!$ckan){
        require_once(dirname(<strong>FILE</strong>) . &lsquo;/ckan.php&rsquo;);
        $ckan=new Ckan(variable_get(&lsquo;ckan_site&rsquo;, &lsquo;<a href="http://www.ckan.net/">http://www.ckan.net/</a>&rsquo;));
    }
    return $ckan;
}</p>

<p>/<em>*
 * Implements hook_form
 *
 * @param Array $form_state
 * @return Array $form
 </em>/
function ckan_search_form(&amp;$form_state){</p>

<pre><code>$form = array();
$form['q'] = array(
               '#type'          =&gt; 'textfield',
               '#default_value' =&gt; '',
);
$form['submit'] = array(
               '#type'          =&gt; 'submit',
               '#value'         =&gt; t('Search CKAN'),
);

return $form;
</code></pre>

<p>}</p>

<p>function ckan_search_form_submit($form, &amp;$form_state) {
      // The search form relies on control of the redirect destination for its
  // functionality, so we override any static destination set in the request,
  // for example by drupal_access_denied() or drupal_not_found()
  // (see <a href="http://drupal.org/node/292565">http://drupal.org/node/292565</a>).
  if (isset($<em>REQUEST[&lsquo;destination&rsquo;])) {
    unset($</em>REQUEST[&lsquo;destination&rsquo;]);
  }
  if (isset($<em>REQUEST[&lsquo;edit&rsquo;][&lsquo;destination&rsquo;])) {
    unset($</em>REQUEST[&lsquo;edit&rsquo;][&lsquo;destination&rsquo;]);
  }</p>

<p>  $form_state[&lsquo;redirect&rsquo;] = &lsquo;ckan/search/&rsquo;. trim($form_state[&lsquo;values&rsquo;][&lsquo;q&rsquo;]);</p>

<p>}</p>

<p>function ckan_search_results_page($search){
//  return $search;
    try {
     $ckan = ckan_ckan();</p>

<pre><code> $results = $ckan-&gt;search(check_plain($search));
} catch (Exception $e){
    return $e-&gt;getMessage();
}
return theme('ckan_search_results', $results);
</code></pre>

<p>}</p>

<p>/<em>*
 * Create the node the first time this package is seen.
 *
 * This creates a specific URL which override the wildcard one subsequently
 *
 * @param String $ckan_name
 </em>/
function ckan_new($ckan_name){</p>

<pre><code>$ckan = ckan_ckan();
try {
    $ckan_data = $ckan-&gt;getPackage($ckan_name);
} catch (CkanException $e){
    drupal_set_message($e-&gt;getMessage(), 'error');
    drupal_set_title("Error");
    return "Error" ;
}
$node = ckan_create_node($ckan_data);
drupal_goto('node/'. $node-&gt;nid);
</code></pre>

<p>}</p>

<p>function ckan_create_node($ckan_data){
    $node = array(
              &lsquo;title&rsquo;   => $ckan_data->title,
              &lsquo;uid&rsquo;     => 1,
              &lsquo;body&rsquo;    => $ckan_data->name,
              &lsquo;promote&rsquo; => 1,
              &lsquo;path&rsquo;    => &lsquo;ckan/data/&rsquo; . $ckan_data->name,
              &lsquo;type&rsquo;    => &lsquo;ckan&rsquo;,
              &lsquo;comment&rsquo; => 2,</p>

<pre><code>);

if ($node = node_submit($node)) {
    node_save($node);
} else {
    drupal_set_message("Failed to create node for package.");
}
return $node;
</code></pre>

<p>}</p>

<p>function ckan_node_info() {</p>

<pre><code>return array(
'ckan' =&gt; array(
  'name'           =&gt; t('CKAN Package'),
  'module'         =&gt; 'ckan',
  'description'    =&gt; t('A package of Open Data.'),
  'has_title'      =&gt; TRUE,
  'title_label'    =&gt; t('Title'),
  'has_body'       =&gt; TRUE,
  'body_label'     =&gt; t('Package Description'),
  'min_word_count' =&gt; 0,
  'locked'         =&gt; TRUE
)
);
</code></pre>

<p>}</p>

<p>function ckan_load($node){
    $ckan = ckan_ckan();
    try {
        $node->ckan = $ckan->getPackage($node->body);
    } catch(Exception $e){
        drupal_set_message($e->getMessage(), &lsquo;error&rsquo;);
    }
//  print_r($node->ckan);
    return $node;
}</p>

<p>function ckan_view($node, $teaser = FALSE, $page = FALSE) {</p>

<p>  $node = node_prepare($node, $teaser);
  $node->content[&lsquo;title&rsquo;][&lsquo;#value&rsquo;]  = check_plain($node->ckan->title);
  $node->content[&lsquo;body&rsquo;][&lsquo;#value&rsquo;] = nl2br(check_plain($node->ckan->notes));</p>

<p>  return $node;
}</p>

<p>function ckan_theme() {
    return array(
    &lsquo;ckan_search_results&rsquo; => array(&lsquo;arguments&rsquo; => array(&lsquo;results&rsquo;)),
    );
}</p>

<p>function theme_ckan_search_results($results) {
    $content = &lsquo;&rsquo;;
    $content .= &ldquo;<p>&rdquo; . $results->count . &ldquo; Results found</p>&rdquo;;
    foreach ($results->results as $package){
        $content .= &lsquo;<h2>&rsquo; . l($package->title, &lsquo;ckan/data/&rsquo; . urlencode(check_plain($package->name))) . &lsquo;</h2>&rsquo;;
        $content .= &lsquo;<p>&rsquo; . nl2br(check_plain($package->notes)) . &lsquo;</p>&rsquo;;
        $content .= &lsquo;<p>&rsquo;;
        foreach ($package->groups as $i => $group){
            $content .= &lsquo;<b>&rsquo; . check_plain($group) . &lsquo;</b> &rsquo;;
        }
        $content .= &lsquo;</p>&rsquo;;
    }
    return $content;</p>

<p>}
?></p>

<p>see also <a href="http://www.practicalweb.co.uk/blog/10/02/23/accessing-ckan-data-php">Accessing CKAN data from PHP</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Accessing CKAN Data From PHP]]></title>
    <link href="http://www.practicalweb.co.uk/blog/2010/02/23/accessing-ckan-data-from-php/"/>
    <updated>2010-02-23T00:00:00+00:00</updated>
    <id>http://www.practicalweb.co.uk/blog/2010/02/23/accessing-ckan-data-from-php</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been working on a couple of open data projects recently - which has been very rewarding.</p>

<p>A couple of people have asked for some code so I&rsquo;ve knocked up a quick version of the sort of thing I&rsquo;ve been working on.</p>

<p>This code requires PHP 5.1 for the JSON functions but doesn&rsquo;t need any extra libraries (pecl_http can give better error messages but is a bit of a pain to install).</p>

<p>The Notes field in packages returns output in Markdown format - you can convert this to HTMl with a parser available at <a href="http://michelf.com/projects/php-markdown">http://michelf.com/projects/php-markdown</a></p>

<p>This isn&rsquo;t production code so please test before using.</p>

<p>&lt;?php</p>

<p>class Ckan {
    private  $url = &lsquo;<a href="http://www.ckan.net/">http://www.ckan.net/</a>&rsquo;;
    private $errors = array(
                              &lsquo;400&rsquo;  =>   &lsquo;Bad Request&rsquo;,
                              &lsquo;403&rsquo;  =>   &lsquo;Not Authorized&rsquo;,
                              &lsquo;404&rsquo;  =>   &lsquo;Not Found&rsquo;,
                              &lsquo;500&rsquo;  =>   &lsquo;Internal Server Error&rsquo;,
    );</p>

<pre><code>public function __construct($url=null){
    if ($url){
        $this-&gt;url=$url;
    }
}

private function transfer($url){

    $ch = curl_init($this-&gt;url . $url);


    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_HEADER, 0);
    curl_setopt($ch, CURLOPT_TIMEOUT, 30);
    $result = curl_exec($ch);
    $info = curl_getinfo($ch);
    curl_close($ch);
    if ($info['http_code'] != 200){
        throw new CkanException($this-&gt;error_codes["$info[http_code]"]);
    }
    if (!$result){
        throw new CkanException("No Result");
    }
    return json_decode($result);
}

public function search($keyword){
    $results = $this-&gt;transfer('api/search/package/?all_fields=1&amp;q=' . urlencode($keyword));
    if (!$results-&gt;count){
        throw new CkanException("Search Error");
    }
    return $results;
}

public function getPackage($package){
    $package = $this-&gt;transfer('api/rest/package/' . urlencode($package));
    if (!$package-&gt;name){
        throw new CkanException("Package Load Error");
    }
    return $package;
}


public function getPackageList(){
    $list =  $this-&gt;transfer('api/rest/package/');
    if (!is_array($list)){
        throw new CkanException("Package List Error");
    }
    return $list;
}

public function getGroup($group){
    $group = $this-&gt;transfer('api/rest/group/' . urlencode($group) );
    if (!$group-&gt;name){
        throw new CkanException("Group Error");
    }
    return $group;
}

public function getGroupList(){
    $groupList = $this-&gt;transfer('api/rest/group/');
    if (!is_array($groupList)){
        throw new CkanException("Group List Error");
    }
    return $groupList;
}
</code></pre>

<p>}</p>

<p>class CkanException extends Exception{}</p>

<p>?></p>

<p>Test with</p>

<p>&lt;?php</p>

<p>require_once(&ldquo;ckan.php&rdquo;);</p>

<p>$ckan = new Ckan();</p>

<p>$data = $ckan->getPackage(&lsquo;edmonton-data&rsquo;);</p>

<p>print_r($data);</p>

<p>?></p>

<p>I&rsquo;m keeping this file and a Drupal module that uses it on Github at:</p>

<p><a href="http://github.com/practicalweb/drupal-ckan">http://github.com/practicalweb/drupal-ckan</a></p>
]]></content>
  </entry>
  
</feed>
