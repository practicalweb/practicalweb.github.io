<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Testing | PracticalWeb Ltd]]></title>
  <link href="http://www.practicalweb.co.uk/blog/categories/testing/atom.xml" rel="self"/>
  <link href="http://www.practicalweb.co.uk/"/>
  <updated>2014-10-31T18:43:23+00:00</updated>
  <id>http://www.practicalweb.co.uk/</id>
  <author>
    <name><![CDATA[Sean Burlington]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Selenium Test for computedStyle]]></title>
    <link href="http://www.practicalweb.co.uk/blog/2011/06/28/selenium-test-for-computedstyle/"/>
    <updated>2011-06-28T00:00:00+01:00</updated>
    <id>http://www.practicalweb.co.uk/blog/2011/06/28/selenium-test-for-computedstyle</id>
    <content type="html"><![CDATA[<p>I wanted to write some automated tests for CSS changes and bugs, these type of issues are quite prone to regression so re-running the tests has a large benefit.</p>

<p>It is possible to add new assertions to selenium via the user-extensions.js file</p>

<p>The following adds a test for computed style, this only works in firefox as far as I know - but some automation is better than none</p>

<p><code>
//only works in firefox
Selenium.prototype.assertStyle = function(locator, text) {
    var params = text.split(&lsquo;=&rsquo;, 2);</p>

<pre><code>var propertyName = params[0];
var expectedValue = params[1];

var element = this.page().findElement(locator);
var actualValue = this.browserbot.getCurrentWindow().getComputedStyle(element, null).getPropertyValue(propertyName);
Assert.matches(expectedValue, actualValue);
</code></pre>

<p>};</p>

<p></code></p>

<p>Now I can add a selenium test like
<code></p>

<table>
<tr>
    <td>assertStyle</td>
    <td>//td[@class='lender'][1]</td>
    <td>text-align=center</td>
</tr>

</table>


<p></code>
Selenium only lets me pass two parameters and really I want three (locator, css property, expected value). So I&rsquo;ve hacked this and put two parameters into one - which is a bit smelly but for now gets the job done - comments on better methods very welcome.</p>

<p>I need to at least check that the &lsquo;text&rsquo; parameter is validated properly - but I figured I&rsquo;d blog now and update later as I&rsquo;ve a deadline to meet today.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Selenium UI-Elements Rollups]]></title>
    <link href="http://www.practicalweb.co.uk/blog/2011/06/02/selenium-ui-elements-rollups/"/>
    <updated>2011-06-02T00:00:00+01:00</updated>
    <id>http://www.practicalweb.co.uk/blog/2011/06/02/selenium-ui-elements-rollups</id>
    <content type="html"><![CDATA[<p>I wasn&rsquo;t 100% clear from the docs how to implement rollup rules in selenium ui-elements and searching the web didn&rsquo;t return much - so here&rsquo;s an example in case it&rsquo;s helpful to others.</p>

<p>Add this to the user-extensions.js file</p>

<p><code>
var manager = new RollupManager();</p>

<p>manager.addRollupRule({
    name: &lsquo;compare_product&rsquo;
    , description: &lsquo;gets to the reults on a compare product page&rsquo;
    , args: [
        {
          name: &lsquo;term&rsquo;
        , description: &lsquo;the aliased term name of the category&rsquo;
        }
        , {
            name: &lsquo;provider&rsquo;
          , description: &lsquo;the provider name&rsquo;
          }
        , {
            name: &lsquo;product&rsquo;
          , description: &lsquo;the product name&rsquo;
          }
    ]
    , commandMatchers: [
        {
            command: &lsquo;click.+&rsquo;
            , target: &lsquo;starRatingsCompareProduct::search_go\(.+&rsquo;
        }
    ]
    , getExpandedCommands: function(args) {
        var commands = [];</p>

<pre><code>    commands.push({
        command: 'open'
            , target: '/star-ratings/find-star-ratings/'+args.term
    });

    commands.push({
        command: 'selectAndWait'
            , target: 'edit-provider'
    , value: args.provider
    });

    commands.push({
          command: 'pause'
        , target: '1000'
    });
    commands.push({
          command: 'selectAndWait'
        , target: 'edit-product'
        , value: args.product
    });
    commands.push({
          command: 'waitForElementPresent'
        , target: 'star-ratings-badge'
    });
    commands.push({
          command: 'clickAndWait'
        , target: 'edit-same-rating'
    });
    commands.push({
          command: 'waitForTextPresent'
        , target: 'Products with the same Star Rating'
    });
    return commands;
}
</code></pre>

<p>});</p>

<p></code></p>

<p>Then you can use it in selenium as below</p>

<p><code>
<tr>
    <td>rollup</td>
    <td>compare_product</td>
    <td>term=buy-let-insurance, provider=Cactus Cover, product=Residential Let</td>
</tr></p>

<p></code></p>

<p>This avoids me repeating chunks of code that I would otherwise need to get the page to the point at which I want to test it.</p>

<p>NB I&rsquo;ve kind of ignored the commandmatcher bit for the time being (this is a nicety to help the IDE notice a rollup while recording - it&rsquo;s a required field - but doesn&rsquo;t have to be useful).</p>

<p><b>This blog post sponsored by www.defaqto.com (they like their team to give back to the community)</b></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Selenium UI-Elements]]></title>
    <link href="http://www.practicalweb.co.uk/blog/2011/05/19/selenium-ui-elements/"/>
    <updated>2011-05-19T00:00:00+01:00</updated>
    <id>http://www.practicalweb.co.uk/blog/2011/05/19/selenium-ui-elements</id>
    <content type="html"><![CDATA[<p>While playing around with selenium IDE I discovered a fantatsic tool that makes test (and results) more readable while making the suite of tests easier to adapt to layout changes.</p>

<p>What it does is to allow you to centrally define most of the xpath (and related) statements and give page elements meaningful names.</p>

<p>So instead of testing for some element like
<code>
//form[@id=&lsquo;search-block-form&rsquo;]//input[@type=&lsquo;text&rsquo;]
</code></p>

<p>You can test for
<code>
ui=allPages::mainSearchField()
</code></p>

<p>Now - not only is this more readable but if the id of the search form changes during development you don&rsquo;t have to change it in every test case for the form - but only in the file that defines &ldquo;mainSearchField&rdquo;.</p>

<p>You could centralise these definitions in code - but then the IDE would be of less help - and crucially the test results would contain xpath instead of the more semantic names.</p>

<p>I found the documentation a little hard to get my head around at first, but the basics are quite straightforward.</p>

<p>To keep things simple I&rsquo;m going to focus on tests within the IDE but without going all-out to optimise this.</p>

<h2>Getting a basic Test running</h2>


<p>My Test case (written for www.defaqto.com) is</p>

<table cellpadding="1" cellspacing="1" border="1">
<thead>
<tr><td rowspan="1" colspan="3">consumer-nav</td></tr>
</thead><tbody>
<tr>
    <td>open</td>
    <td>/home</td>
    <td></td>
</tr>
<tr>
    <td>assertElementPresent</td>
    <td>ui=allPages::mainLogo()</td>
    <td></td>
</tr>
<tr>
    <td>type</td>
    <td>ui=allPages::searchField()</td>
    <td>credit cards</td>
</tr>
<tr>
    <td>clickAndWait</td>
    <td>ui=allPages::searchButton()</td>
    <td></td>
</tr>
</tbody></table>


<p>And the ui-elements are defined as</p>

<p><code>
var myMap = new UIMap();</p>

<p>myMap.addPageset(
  {
    name: &lsquo;allPages&rsquo;
  , description: &lsquo;defaqto.com pages&rsquo;
  , pathRegexp: &lsquo;.*&rsquo;
  }
);</p>

<p>myMap.addElement(&lsquo;allPages&rsquo;,
  {
    name: &lsquo;mainLogo&rsquo;
  , description: &lsquo;the defaqto logo visible on every page&rsquo;
  , locator: &ldquo;logo&rdquo;
}</p>

<p>);</p>

<p>myMap.addElement(&lsquo;allPages&rsquo;,
    {
      name: &lsquo;searchField&rsquo;
    , description: &lsquo;top search input&rsquo;
    , locator: &ldquo;//form[@id=&lsquo;search-block-form&rsquo;]//input[@type=&lsquo;text&rsquo;]&rdquo;
    }
);</p>

<p>myMap.addElement(&lsquo;allPages&rsquo;,
    {
      name: &lsquo;searchButton&rsquo;
    , description: &lsquo;top search button&rsquo;
    , locator: &ldquo;//form[@id=&lsquo;search-block-form&rsquo;]//input[@type=&lsquo;submit&rsquo;]&rdquo;
    }</p>

<p>);
</code></p>

<p>To run this test install <a href="http://seleniumhq.org/download/">selenium IDE</a> in firefox (you may need the <a href="https://addons.mozilla.org/en-US/firefox/addon/add-on-compatibility-reporter/">add on compatibility reporter plugin</a> to get this to work in Firefox 4).</p>

<p>Then open the IDE (in the tools menu)</p>

<p>In the IDE click the options menu and the sub-item options</p>

<p>Browse to the <a href="http://www.practicalweb.co.uk/sites/default/files/defaqto-map.js.txt">javascript map file</a> for the Selenium core extensions (NB if you download mine rename it to remove the .txt extension)</p>

<p>Click OK</p>

<p>close and re-open the IDE to make it pick up the change</p>

<p>There is an &ldquo;activate developer tools&rdquo; checkbox on the options dialog which allows you to reload the map file when you edit it - but it doesn&rsquo;t seem to work until the file has been loaded once.</p>

<p>At this point selenium should know about the ui map and will auto-complete the terms.</p>

<p>Open the <a href="http://www.practicalweb.co.uk/sites/default/files/consumer-nav.html">test case</a> (from the file menu)</p>

<p>Make sure the base url refers to <a href="http://www.defaqto.com/">http://www.defaqto.com/</a> if you want to run this test (although the search form elements should work on most drupal sites).</p>

<p>Run the test case.</p>

<h2>Documentation - the short version</h2>


<p>The full docs <a href="http://ttwhy.org/code/ui-doc.html">http://ttwhy.org/code/ui-doc.html</a> look daunting - but there are only a few key functions.</p>

<p>Every UI map file has to start by creating a new UIMap object.</p>

<p><code>
var myMap = new UIMap();
</code></p>

<p>This object has methods to add pagesets, elements and rollups.</p>

<p>You only <em>need</em> one pageset and this can cover all pages.</p>

<p><code>
myMap.addPageset(
  {
    name: &lsquo;allPages&rsquo;
  , description: &lsquo;all pages&rsquo;
  , pathRegexp: &lsquo;.*&rsquo;
  }
);
</code></p>

<p>You can add more pagesets - where each pageset represents a group of pages - for example defaqto could have a set of consumer pages and another set of adviser pages, this makes the tests more readable as you can tell really quickly that the element is one specific to a subset of pages. It also helps unclutter the IDE as the autocompleter has fewer options to offer once you have started typing a specific pageset.</p>

<p>But to get started one pageset will do.</p>

<p>Next you need to add element definitions.</p>

<p><code>
myMap.addElement(&lsquo;allPages&rsquo;,
    {
      name: &lsquo;searchField&rsquo;
    , description: &lsquo;top search input&rsquo;
    , locator: &ldquo;//form[@id=&lsquo;search-block-form&rsquo;]//input[@type=&lsquo;text&rsquo;]&rdquo;
    }
);
</code></p>

<p>All this does is map a name to an xpath locator - now the IDE will use this when you record and action of filling in this field, and you can type it in and it will auto-complete.</p>

<p>Crucially - if development causes the id of the form to change it will be really easy to fix the test cases.</p>

<p>Really this is all that is needed to get UI elements working, there is a lot more that it can do.</p>

<p>There are powerful ways to define pageset: manually managed array, regex,URL parameters, or even defining rules to detect the page content.</p>

<p>Each UI-element can  take arguments (so one locator can find the nth element in a list for example) - it can also be used as the basis of finding related elements.</p>

<h2>Rollup Rules</h2>


<p>I haven&rsquo;t played with this yet - but it looks really cool&hellip;</p>

<p>As well as the UIMap there is a RollupManager</p>

<p><code>
var manager = new RollupManager();</p>

<p>manager.addRollupRule({ &hellip; });
manager.addRollupRule({ &hellip; });
</code></p>

<p>What this purports to do is to represent a sequence of steps that can be reused throughout test cases.</p>

<p>So you can centralise steps like logging in which may need to be used in many test cases.</p>

<h2>Thanks</h2>


<p>Thanks to Haw-Bin Chai <a href="http://ttwhy.org/home/blog/category/selenium/">http://ttwhy.org/home/blog/category/selenium/</a> for this functionality and to Mahesh Narayanan for this post
<a href="http://functionaltestautomation.blogspot.com/2009/09/ui-elements-all-about-it.html">http://functionaltestautomation.blogspot.com/2009/09/ui-elements-all-about-it.html</a></p>

<p>Thanks also to my client <a href="http://www.defaqto.com/">Defaqto Ltd</a> for supporting not only their team in adopting best practices but also encouraging posts like this to contribute back to the wider community.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Integrating Selenium and Hudson]]></title>
    <link href="http://www.practicalweb.co.uk/blog/2011/05/12/integrating-selenium-and-hudson/"/>
    <updated>2011-05-12T00:00:00+01:00</updated>
    <id>http://www.practicalweb.co.uk/blog/2011/05/12/integrating-selenium-and-hudson</id>
    <content type="html"><![CDATA[<p>
Hudson http://hudson-ci.org/ is a continuous integration server - it runs and monitors &#8216;jobs&#8217; in a way that is useful to regularly build software and report on any errors.
</p>


<p>
Selenium http://seleniumhq.org/ is a suite of tools specifically for testing web
applications - it tests the full website by automating the running of one or more browsers (so you can test all that pointy clicky ajaxy stuff)
</p>


<p>
You can generate selenium tests with a firefox plugin http://seleniumhq.org/projects/ide/ basic tests can be generated just by recording your actions on a website - and saved as an html test suite.
</p>


<p>
The seleniumhq plugin for hudson http://wiki.hudson-ci.org/display/HUDSON/Seleniumhq+Plugin will start the seleniumrc server, run this test suite, monitor test/failure status and display the selenium report. 
</p>


<p>
Just add this plugin to hudson, ensure you have the seleniumrc jar file available and configured in the global settings page.
</p>


<p>
If you are running hudson on your local development system you may just need to download all the components and configure a job for it to just work. BUT if you want to run these jobs on a machine you are not logged in to you will need to run Xvfb to provide a fake display that the browser can use. 
</p>


<p>
I&#8217;ve done this by 
</p>


<p>
setting the environment variable DISPLAY to :99 
</p>


<p>
running the following shell script before the selenium test suite
</p>


<p><code>
Xvfb :99 -fp /usr/share/X11/fonts/misc -screen 0 1024x768x24 &gt; xvfb.log 2&amp;>1 &amp;<br />
echo $! &gt; xvfp.pid
</code></p>

<p>
The SeleniumHQ testSuite config needs to know which browser to use, the staturl, where to find the tests and where to log the results  
</p>


<p><code>
kill $(cat xvfp.pid)
rm xvfb.pid
</code></p>

<p>
and checked the &quot;Publish Selenium Report&quot; option - configured to match the results file as above. 
</p>


<p>
I had hoped that I could export the DISPLAY variable within the script but that didn&#8217;t work - the environment variable setting is global so I&#8217;ve limited hudson to run one job at a time as they all share a display.
</p>


<p>
I have redirected all output from xvfb to a logfile otherwise hudson complains about leaking file descriptors.
</p>


<p>
So far this is great - my tests get run regularly and reported consistently over time.
</p>


<p>
But these tests are written in selenese (an html table based markup) which while having a great deal to offer does not have the full power of a programming language so my next step is to run tests via phpunit (this way I can access the database, loop over my test suite for a range of browsers, and more)
</p>


<p>
This time I need to manage starting the selenium server as well as xvfb
</p>


<p><code>
Xvfb :99   -screen 0 1024x768x24 &amp;> xvfb.log &amp;
echo $! > xvfb.pid
export DISPLAY=:99
sleep 10
java -jar /path-to/selenium-server.jar &amp;> selenium.log &amp;
echo $! > selenium.pid
sleep 30</p>

<p>phpunit &ndash;log-xml phpunit.xml Example.php</p>

<p>kill $(cat xvfb.pid)
rm xvfb.pid
kill $(cat selenium.pid)
rm selenium.pid    
</code></p>

<p>
I have instructed phpunit to log in xml format (aka junit format in more recent versions - but I&#8217;m running an old version of debian at the moment) 
</p>


<p>
I added the xunit plugin http://wiki.hudson-ci.org/display/HUDSON/xUnit+Plugin to hudson and configured &quot;Publish JUnit test result report&quot; for my project specifying phpunit.xml as in the above script.
</p>


<p><p>It&rsquo;s worth noting that Drupals simpletest can also provide output in junit format at least according to <a href="http://drupal.org/node/1024426">http://drupal.org/node/1024426</a> so it should be possible to mix test types and aggregate the reports.
<p>
So now it all seems to be working an I can run all my tests overnight - all software has bugs - but at least now we should see fewer bugs reoccur as we&rsquo;ll keep adding tests to prevent these things creeping up on us.
</p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Drupal Wishlist]]></title>
    <link href="http://www.practicalweb.co.uk/blog/2009/11/05/drupal-wishlist/"/>
    <updated>2009-11-05T00:00:00+00:00</updated>
    <id>http://www.practicalweb.co.uk/blog/2009/11/05/drupal-wishlist</id>
    <content type="html"><![CDATA[<p><p>Drupal has a lot of great strengths and some weaknesses<p></p>

<p><p>The following are the key areas of Drupal that (as a programmer) I would like to see improved.<p></p>

<p><h2>
Negative testing 
</h2>
<p>
Drupal only seems to
test the positive path, that is that given the right inputs you get
the right results and apart from security nothing else matters.
</p>
<p>
The result of this is
that incorrect inputs result in silent failures that can be very hard
to debug.
</p>
<p>
By testing that
incorrect inputs also provide dependable results with clear error
messages bug fixing becomes much easier and development time can be
reduced.
</p>
<p>
Of course it isn&rsquo;t
possible top test for all possible bad inputs – but just catching
some of the likely errors can be very helpful.
</p>
<h2>Database abstraction</h2>
<p>
If Drupal (and
contributed modules) could provide functions to manage their data,
thereby removing the need for developers to either access data
directly or work via the GUI – then many development tasks would
become easier.
</p>
<p>
This would have
particular benefit for the deployment of upgrades to large sites as
all the changes could be written into update hooks.
</p>
<h2>Stronger encapsulation</h2>
<p>
I find it particularly
noticeable when writing “unit” tests for Drupal that the
encapsulation could be stronger. Pervasive use of globals, direct
database access, and static variables for caching make it very hard
to test Drupal at the unit level – most tests end up running at the
integration level which while still useful is much slower and harder
to integrate into the regular development cycle (code, test, repeat –
then commit).
</p>
<h2>Upgrades with backwards compatibility</h2>
<p>
Major Drupal upgrades
are not compatible, and minor upgrades don&rsquo;t add features.
</p>
<p>
The biggest impact this
has had on me and other professional developers I know is that it
removes the main incentive to contribute – namely to fix problems
in Drupal projects currently in progress.
</p>
<h2>Define hooks</h2>
<p>
“<a href="http://api.drupal.org/api/group/hooks">A hook is a PHP
function that is named foo_bar()</a>”
</p>
<p>
Well I know that, and I
know how to use them and even create new ones – but I think a more
complete definition would help clarify the purpose of hooks and
perhaps more importantly better named hooks would provide the
developer with a better idea of when hooks are called.
</p>
<p>
I think that hooks
probably provide more than one service, some hooks are really event
handlers (hook_cron() hook_validate() ) others are a kind of
interface (hook_view(), hook_update(), hook_insert() etc).
</p>
<p>
If you think of
hook_form_alter() as an event handler rather than for what work is
typically done at that event you might rename it hook_form_build()
which might help developers learn when it is fired and also provide
hints as to other ways it might be used (eg you could use it to log
the number of times a form is displayed on a site).
</p>
<h2>Separate the toolkit from the components</h2>
<p>
I love the way that
drush isn&rsquo;t a Drupal module, its independent of production code – I
think it would be great of more tools provided this ability.
</p>
<p>
 With a
strong API it would even be possible to use just the API of something
like CCK and remove the GUI entirely from production – thus
removing one way that a client who demands the admin password can
break the site.
</p>
<h2>Choose
a target</h2>
<p>
Drupal
tries to be all things to everyone: but this isn&rsquo;t possible.
</p>
<p>
I
don&rsquo;t think you can have a product that runs on low end servers with
out of date versions of PHP, works the same on any database (even
SQLite) and still meets the needs of enterprise level teams.
</p>
<p>
Drupal
needs to pick a target and focus on that – otherwise other products
will come along and do a much better job for specific sectors of the
market.
</p>
<p>
It
seems like there is a <a href="http://www.disambiguity.com/designing-for-the-wrong-target-audience/">similar issue with the user interface
</a>
</p>
<h2>Conclusion</h2>
<p>Generally I&rsquo;d like to see a much tighter Drupal with more focus on best practise and a clean API.</p></p>

<p><p>Whether that is what the rest of the Drupal community wants is another thing.</p></p>
]]></content>
  </entry>
  
</feed>
