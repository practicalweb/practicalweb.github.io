<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Testing | PracticalWeb Ltd]]></title>
  <link href="http://www.practicalweb.co.uk/blog/categories/testing/atom.xml" rel="self"/>
  <link href="http://www.practicalweb.co.uk/"/>
  <updated>2015-03-11T22:20:35+00:00</updated>
  <id>http://www.practicalweb.co.uk/</id>
  <author>
    <name><![CDATA[Sean Burlington]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SSL Problems in Jmeter and Java 1.7]]></title>
    <link href="http://www.practicalweb.co.uk/blog/2015/03/11/ssl-problems-in-jmeter-and-java-1-dot-7/"/>
    <updated>2015-03-11T22:10:36+00:00</updated>
    <id>http://www.practicalweb.co.uk/blog/2015/03/11/ssl-problems-in-jmeter-and-java-1-dot-7</id>
    <content type="html"><![CDATA[<p>When using jmeter on an ssl enabled site I was seeing an error</p>

<pre><code>SSL handshake alert: unrecognized_name error
</code></pre>

<p>But I&rsquo;d read that since jmeter version 2.4 ssl should work fine</p>

<p>It turns out that</p>

<p>Java 7 introduced a feature (SNI support) and can trigger this error in some circumstances.</p>

<p>As workaround you can diusable this feayuire by setting the property  jsse.enableSNIExtension to false.</p>

<p>and run jmeter like</p>

<pre><code class="bash">jmeter -Djsse.enableSNIExtension=false -t mytest.jmx
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Log From Jmeter to Statsd]]></title>
    <link href="http://www.practicalweb.co.uk/blog/2014/11/25/how-to-log-from-jmeter-to-statsd/"/>
    <updated>2014-11-25T19:57:40+00:00</updated>
    <id>http://www.practicalweb.co.uk/blog/2014/11/25/how-to-log-from-jmeter-to-statsd</id>
    <content type="html"><![CDATA[<p>In order to log from Jmeter to statsd you need to add <a href="https://github.com/tim-group/java-statsd-client/releases/download/v3.0.1/java-statsd-client-3.0.1.jar">a statsd library</a> to the jmeter /lib path</p>

<p>Then have a beanshell on the thread group setup a statsd object for use by the threads</p>

<p>store this in the props variable - JMeterProperties (class java.util.Properties)</p>

<p>Note that <a href="https://docs.oracle.com/javase/7/docs/api/java/util/Properties.html">the docs</a> say</p>

<blockquote><p>Because Properties inherits from Hashtable, the put and putAll methods can be applied to a Properties object. Their use is strongly discouraged as they allow the caller to insert entries whose keys or values are not Strings. The setProperty method should be used instead. If the store or save method is called on a &ldquo;compromised&rdquo; Properties object that contains a non-String key or value, the call will fail. Similarly, the call to the propertyNames or list method will fail if it is called on a &ldquo;compromised&rdquo; Properties object that contains a non-String key.</p></blockquote>

<p>However I didn&rsquo;t find a better place to put the statsd object yet since the ctx variable is thread specific</p>

<pre><code class="java">import com.timgroup.statsd.StatsDClient;
import com.timgroup.statsd.NonBlockingStatsDClient;

StatsDClient statsd = new NonBlockingStatsDClient("jmeter.test", "statsd.exapmle.com", 8125);

props.put("statsd", statsd);
</code></pre>

<p>Now on the Sampler you want to record data for add a beanshell post processor</p>

<p>You can retrieve the statsd connection from the props variable, and obtain the request time taken from the prev variable which is a org.apache.jmeter.samplers.SampleResult</p>

<p>Once we have the pieces together logging the request time to statsd is simple</p>

<pre><code class="java">
import com.timgroup.statsd.StatsDClient;
import com.timgroup.statsd.NonBlockingStatsDClient;

StatsDClient statsd = (StatsDClient) props.get("statsd");
statsd.recordExecutionTime("loadtime", prev.getTime());
</code></pre>

<p>I&rsquo;ve put an example test plan on github <a href="https://github.com/practicalweb/jmeter-statsd-demo">https://github.com/practicalweb/jmeter-statsd-demo</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Selenium Test for computedStyle]]></title>
    <link href="http://www.practicalweb.co.uk/blog/2011/06/28/selenium-test-for-computedstyle/"/>
    <updated>2011-06-28T00:00:00+01:00</updated>
    <id>http://www.practicalweb.co.uk/blog/2011/06/28/selenium-test-for-computedstyle</id>
    <content type="html"><![CDATA[<p>I wanted to write some automated tests for CSS changes and bugs, these type of issues are quite prone to regression so re-running the tests has a large benefit.</p>

<p>It is possible to add new assertions to selenium via the user-extensions.js file</p>

<p>The following adds a test for computed style, this only works in firefox as far as I know - but some automation is better than none</p>

<p><code>
//only works in firefox
Selenium.prototype.assertStyle = function(locator, text) {
    var params = text.split(&lsquo;=&rsquo;, 2);</p>

<pre><code>var propertyName = params[0];
var expectedValue = params[1];

var element = this.page().findElement(locator);
var actualValue = this.browserbot.getCurrentWindow().getComputedStyle(element, null).getPropertyValue(propertyName);
Assert.matches(expectedValue, actualValue);
</code></pre>

<p>};</p>

<p></code></p>

<p>Now I can add a selenium test like
<code></p>

<table>
<tr>
    <td>assertStyle</td>
    <td>//td[@class='lender'][1]</td>
    <td>text-align=center</td>
</tr>

</table>


<p></code>
Selenium only lets me pass two parameters and really I want three (locator, css property, expected value). So I&rsquo;ve hacked this and put two parameters into one - which is a bit smelly but for now gets the job done - comments on better methods very welcome.</p>

<p>I need to at least check that the &lsquo;text&rsquo; parameter is validated properly - but I figured I&rsquo;d blog now and update later as I&rsquo;ve a deadline to meet today.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Selenium UI-Elements Rollups]]></title>
    <link href="http://www.practicalweb.co.uk/blog/2011/06/02/selenium-ui-elements-rollups/"/>
    <updated>2011-06-02T00:00:00+01:00</updated>
    <id>http://www.practicalweb.co.uk/blog/2011/06/02/selenium-ui-elements-rollups</id>
    <content type="html"><![CDATA[<p>I wasn&rsquo;t 100% clear from the docs how to implement rollup rules in selenium ui-elements and searching the web didn&rsquo;t return much - so here&rsquo;s an example in case it&rsquo;s helpful to others.</p>

<p>Add this to the user-extensions.js file</p>

<p><code>
var manager = new RollupManager();</p>

<p>manager.addRollupRule({
    name: &lsquo;compare_product&rsquo;
    , description: &lsquo;gets to the reults on a compare product page&rsquo;
    , args: [
        {
          name: &lsquo;term&rsquo;
        , description: &lsquo;the aliased term name of the category&rsquo;
        }
        , {
            name: &lsquo;provider&rsquo;
          , description: &lsquo;the provider name&rsquo;
          }
        , {
            name: &lsquo;product&rsquo;
          , description: &lsquo;the product name&rsquo;
          }
    ]
    , commandMatchers: [
        {
            command: &lsquo;click.+&rsquo;
            , target: &lsquo;starRatingsCompareProduct::search_go\(.+&rsquo;
        }
    ]
    , getExpandedCommands: function(args) {
        var commands = [];</p>

<pre><code>    commands.push({
        command: 'open'
            , target: '/star-ratings/find-star-ratings/'+args.term
    });

    commands.push({
        command: 'selectAndWait'
            , target: 'edit-provider'
    , value: args.provider
    });

    commands.push({
          command: 'pause'
        , target: '1000'
    });
    commands.push({
          command: 'selectAndWait'
        , target: 'edit-product'
        , value: args.product
    });
    commands.push({
          command: 'waitForElementPresent'
        , target: 'star-ratings-badge'
    });
    commands.push({
          command: 'clickAndWait'
        , target: 'edit-same-rating'
    });
    commands.push({
          command: 'waitForTextPresent'
        , target: 'Products with the same Star Rating'
    });
    return commands;
}
</code></pre>

<p>});</p>

<p></code></p>

<p>Then you can use it in selenium as below</p>

<p><code>
<tr>
    <td>rollup</td>
    <td>compare_product</td>
    <td>term=buy-let-insurance, provider=Cactus Cover, product=Residential Let</td>
</tr></p>

<p></code></p>

<p>This avoids me repeating chunks of code that I would otherwise need to get the page to the point at which I want to test it.</p>

<p>NB I&rsquo;ve kind of ignored the commandmatcher bit for the time being (this is a nicety to help the IDE notice a rollup while recording - it&rsquo;s a required field - but doesn&rsquo;t have to be useful).</p>

<p><b>This blog post sponsored by www.defaqto.com (they like their team to give back to the community)</b></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Selenium UI-Elements]]></title>
    <link href="http://www.practicalweb.co.uk/blog/2011/05/19/selenium-ui-elements/"/>
    <updated>2011-05-19T00:00:00+01:00</updated>
    <id>http://www.practicalweb.co.uk/blog/2011/05/19/selenium-ui-elements</id>
    <content type="html"><![CDATA[<p>While playing around with selenium IDE I discovered a fantatsic tool that makes test (and results) more readable while making the suite of tests easier to adapt to layout changes.</p>

<p>What it does is to allow you to centrally define most of the xpath (and related) statements and give page elements meaningful names.</p>

<p>So instead of testing for some element like
<code>
//form[@id=&lsquo;search-block-form&rsquo;]//input[@type=&lsquo;text&rsquo;]
</code></p>

<p>You can test for
<code>
ui=allPages::mainSearchField()
</code></p>

<p>Now - not only is this more readable but if the id of the search form changes during development you don&rsquo;t have to change it in every test case for the form - but only in the file that defines &ldquo;mainSearchField&rdquo;.</p>

<p>You could centralise these definitions in code - but then the IDE would be of less help - and crucially the test results would contain xpath instead of the more semantic names.</p>

<p>I found the documentation a little hard to get my head around at first, but the basics are quite straightforward.</p>

<p>To keep things simple I&rsquo;m going to focus on tests within the IDE but without going all-out to optimise this.</p>

<h2>Getting a basic Test running</h2>


<p>My Test case (written for www.defaqto.com) is</p>

<table cellpadding="1" cellspacing="1" border="1">
<thead>
<tr><td rowspan="1" colspan="3">consumer-nav</td></tr>
</thead><tbody>
<tr>
    <td>open</td>
    <td>/home</td>
    <td></td>
</tr>
<tr>
    <td>assertElementPresent</td>
    <td>ui=allPages::mainLogo()</td>
    <td></td>
</tr>
<tr>
    <td>type</td>
    <td>ui=allPages::searchField()</td>
    <td>credit cards</td>
</tr>
<tr>
    <td>clickAndWait</td>
    <td>ui=allPages::searchButton()</td>
    <td></td>
</tr>
</tbody></table>


<p>And the ui-elements are defined as</p>

<p><code>
var myMap = new UIMap();</p>

<p>myMap.addPageset(
  {
    name: &lsquo;allPages&rsquo;
  , description: &lsquo;defaqto.com pages&rsquo;
  , pathRegexp: &lsquo;.*&rsquo;
  }
);</p>

<p>myMap.addElement(&lsquo;allPages&rsquo;,
  {
    name: &lsquo;mainLogo&rsquo;
  , description: &lsquo;the defaqto logo visible on every page&rsquo;
  , locator: &ldquo;logo&rdquo;
}</p>

<p>);</p>

<p>myMap.addElement(&lsquo;allPages&rsquo;,
    {
      name: &lsquo;searchField&rsquo;
    , description: &lsquo;top search input&rsquo;
    , locator: &ldquo;//form[@id=&lsquo;search-block-form&rsquo;]//input[@type=&lsquo;text&rsquo;]&rdquo;
    }
);</p>

<p>myMap.addElement(&lsquo;allPages&rsquo;,
    {
      name: &lsquo;searchButton&rsquo;
    , description: &lsquo;top search button&rsquo;
    , locator: &ldquo;//form[@id=&lsquo;search-block-form&rsquo;]//input[@type=&lsquo;submit&rsquo;]&rdquo;
    }</p>

<p>);
</code></p>

<p>To run this test install <a href="http://seleniumhq.org/download/">selenium IDE</a> in firefox (you may need the <a href="https://addons.mozilla.org/en-US/firefox/addon/add-on-compatibility-reporter/">add on compatibility reporter plugin</a> to get this to work in Firefox 4).</p>

<p>Then open the IDE (in the tools menu)</p>

<p>In the IDE click the options menu and the sub-item options</p>

<p>Browse to the <a href="http://www.practicalweb.co.uk/sites/default/files/defaqto-map.js.txt">javascript map file</a> for the Selenium core extensions (NB if you download mine rename it to remove the .txt extension)</p>

<p>Click OK</p>

<p>close and re-open the IDE to make it pick up the change</p>

<p>There is an &ldquo;activate developer tools&rdquo; checkbox on the options dialog which allows you to reload the map file when you edit it - but it doesn&rsquo;t seem to work until the file has been loaded once.</p>

<p>At this point selenium should know about the ui map and will auto-complete the terms.</p>

<p>Open the <a href="http://www.practicalweb.co.uk/sites/default/files/consumer-nav.html">test case</a> (from the file menu)</p>

<p>Make sure the base url refers to <a href="http://www.defaqto.com/">http://www.defaqto.com/</a> if you want to run this test (although the search form elements should work on most drupal sites).</p>

<p>Run the test case.</p>

<h2>Documentation - the short version</h2>


<p>The full docs <a href="http://ttwhy.org/code/ui-doc.html">http://ttwhy.org/code/ui-doc.html</a> look daunting - but there are only a few key functions.</p>

<p>Every UI map file has to start by creating a new UIMap object.</p>

<p><code>
var myMap = new UIMap();
</code></p>

<p>This object has methods to add pagesets, elements and rollups.</p>

<p>You only <em>need</em> one pageset and this can cover all pages.</p>

<p><code>
myMap.addPageset(
  {
    name: &lsquo;allPages&rsquo;
  , description: &lsquo;all pages&rsquo;
  , pathRegexp: &lsquo;.*&rsquo;
  }
);
</code></p>

<p>You can add more pagesets - where each pageset represents a group of pages - for example defaqto could have a set of consumer pages and another set of adviser pages, this makes the tests more readable as you can tell really quickly that the element is one specific to a subset of pages. It also helps unclutter the IDE as the autocompleter has fewer options to offer once you have started typing a specific pageset.</p>

<p>But to get started one pageset will do.</p>

<p>Next you need to add element definitions.</p>

<p><code>
myMap.addElement(&lsquo;allPages&rsquo;,
    {
      name: &lsquo;searchField&rsquo;
    , description: &lsquo;top search input&rsquo;
    , locator: &ldquo;//form[@id=&lsquo;search-block-form&rsquo;]//input[@type=&lsquo;text&rsquo;]&rdquo;
    }
);
</code></p>

<p>All this does is map a name to an xpath locator - now the IDE will use this when you record and action of filling in this field, and you can type it in and it will auto-complete.</p>

<p>Crucially - if development causes the id of the form to change it will be really easy to fix the test cases.</p>

<p>Really this is all that is needed to get UI elements working, there is a lot more that it can do.</p>

<p>There are powerful ways to define pageset: manually managed array, regex,URL parameters, or even defining rules to detect the page content.</p>

<p>Each UI-element can  take arguments (so one locator can find the nth element in a list for example) - it can also be used as the basis of finding related elements.</p>

<h2>Rollup Rules</h2>


<p>I haven&rsquo;t played with this yet - but it looks really cool&hellip;</p>

<p>As well as the UIMap there is a RollupManager</p>

<p><code>
var manager = new RollupManager();</p>

<p>manager.addRollupRule({ &hellip; });
manager.addRollupRule({ &hellip; });
</code></p>

<p>What this purports to do is to represent a sequence of steps that can be reused throughout test cases.</p>

<p>So you can centralise steps like logging in which may need to be used in many test cases.</p>

<h2>Thanks</h2>


<p>Thanks to Haw-Bin Chai <a href="http://ttwhy.org/home/blog/category/selenium/">http://ttwhy.org/home/blog/category/selenium/</a> for this functionality and to Mahesh Narayanan for this post
<a href="http://functionaltestautomation.blogspot.com/2009/09/ui-elements-all-about-it.html">http://functionaltestautomation.blogspot.com/2009/09/ui-elements-all-about-it.html</a></p>

<p>Thanks also to my client <a href="http://www.defaqto.com/">Defaqto Ltd</a> for supporting not only their team in adopting best practices but also encouraging posts like this to contribute back to the wider community.</p>
]]></content>
  </entry>
  
</feed>
