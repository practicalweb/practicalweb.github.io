<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Javascript | PracticalWeb Ltd]]></title>
  <link href="http://www.practicalweb.co.uk/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://www.practicalweb.co.uk/"/>
  <updated>2016-02-03T12:14:15+00:00</updated>
  <id>http://www.practicalweb.co.uk/</id>
  <author>
    <name><![CDATA[Sean Burlington]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Add Annotations to Grafana via Elasticsearch]]></title>
    <link href="http://www.practicalweb.co.uk/blog/2015/04/27/add-annotations-to-grafana-via-elasticsearch/"/>
    <updated>2015-04-27T21:43:55+01:00</updated>
    <id>http://www.practicalweb.co.uk/blog/2015/04/27/add-annotations-to-grafana-via-elasticsearch</id>
    <content type="html"><![CDATA[<p>It took me a while to figure out how to setup elasticsearch for grafana annotations, and I wanted a small page to allow me to add annotations</p>

<p>Mostly I figure we&rsquo;ll add a line to deploy scripts to track versions - but I&rsquo;d like to be able to manually annotate outages</p>

<p><div><script src='https://gist.github.com/29af780a56e09e3055ed.js?file=grafana-elasticsearch-annotations.html'></script>
<noscript><pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;script src=&quot;http://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;moment.min.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;moment-timezone.js&quot;&gt;&lt;/script&gt;
&lt;script&gt;

$(document).ready(function(){
    $(&quot;#annotate&quot;).click(function(){
var stuff=JSON.stringify({
          &quot;when_it_happened&quot;: $(&quot;#when_it_happened&quot;).val(),
 &quot;title&quot; : $(&quot;#title&quot;).val(),
 &quot;description&quot; : $(&quot;#description&quot;).val(),
        });

        $.post(&quot;http://graphite.example.com:9200/events/prod/&quot;,
        stuff,
        function(data,status){
            alert(&quot;Data: &quot; + JSON.stringify(data) + &quot;\nStatus: &quot; + status);
        });
    });
});
&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;h1&gt;Add an annotation to grafana&lt;/h1&gt;

&lt;form&gt;
&lt;p&gt;&lt;label for=&quot;title&quot;&gt; Title &lt;input  id=&quot;title&quot; type=&quot;text&quot; /&gt;&lt;/label&gt;&lt;/p&gt;
&lt;p&gt;&lt;label for=&quot;description&quot;&gt; Description &lt;input  id=&quot;description&quot; type=&quot;text&quot; /&gt;&lt;/label&gt;&lt;/p&gt;
&lt;p&gt;&lt;label for=&quot;when_it_happened&quot;&gt; Date/time &lt;input  id=&quot;when_it_happened&quot; type=&quot;text&quot; /&gt;&lt;/label&gt; time is in UTC&lt;/p&gt;
&lt;p&gt;&lt;input id=&quot;annotate&quot; type=&quot;button&quot; value=&quot;Annotate!&quot; /&gt;&lt;/p&gt;
&lt;/form&gt;

&lt;script type=&quot;text/javascript&quot;&gt;
var today = new Date();
var hour = today.getUTCHours();
if (hour &lt; 10) {
  hour = &quot;0&quot; + hour;
}
var minute = today.getUTCMinutes();
if (minute &lt; 10) {
  minute = &quot;0&quot; + minute;
}

//jQuery('#when_it_happened').datetimepicker({format:'Y-m-d\\TH:i:00.000\\Z', defaultTime : hour + ':' + minute });

var now = moment.tz('UTC').format('YYYY-MM-DD\\THH:mm:00.000\\Z');  
jQuery('#when_it_happened').val(now)
&lt;/script&gt;
&lt;p&gt;To setup the correct mapping on the server I run the following&lt;/p&gt;
 
&lt;pre&gt;
# delete all
curl -XDELETE  &quot;http://graphite.example.com:9200/events/&quot;
 
# create mapping
curl -XPUT graphite.example.com:9200/events -d '{
    &quot;settings&quot;: {
        &quot;index.number_of_shards&quot;: 1,
        &quot;index.number_of_replicas&quot;: 0
    },
    &quot;mappings&quot;: {
        &quot;prod&quot;: {
            &quot;_timestamp&quot;: {
                &quot;enabled&quot;: &quot;true&quot;
            },
            &quot;properties&quot;: {
                &quot;title&quot;: {
                  &quot;type&quot;: &quot;string&quot;
                },
                &quot;description&quot;: {
                  &quot;type&quot;: &quot;string&quot;
                },
                &quot;when_it_happened&quot;: {
                    &quot;type&quot;: &quot;date&quot;,
                    &quot;format&quot;: &quot;yyyy-MM-dd'&quot;'T'&quot;'HH:mm:ss.SSSZ&quot;
                }
            }
        }
    }
}
'
# test creating a record
curl -XPOST graphite.example.com:9200/events/prod/ -d '{
    &quot;when_it_happened&quot;: &quot;2015-04-27T18:30:14.000Z&quot;, &quot;title&quot; : &quot;fake deploy&quot;, &quot;description&quot; : &quot;Imagine that a deploy happened here&quot;
}
'

# check mapping
GET &quot;http://graphite.example.com:9200/events/_mapping?pretty=true&quot;

# test search
curl -XPOST  &quot;http://graphite.example.com:9200/events/_search?pretty=true&quot; -d '{&quot;fields&quot;:[&quot;when_it_happened&quot;],&quot;query&quot;:{&quot;filtered&quot;:{&quot;query&quot;:{&quot;bool&quot;:{&quot;should&quot;:[{&quot;query_string&quot;:{&quot;query&quot;:&quot;*&quot;}}]}},&quot;filter&quot;:{&quot;bool&quot;:{&quot;must&quot;:[{&quot;range&quot;:{&quot;when_it_happened&quot;:{&quot;from&quot;:&quot;now-8y&quot;,&quot;to&quot;:&quot;now+8y&quot;}}}]}}}},&quot;size&quot;:100}'

 
&lt;/pre&gt;
 
&lt;/body&gt;
&lt;/html&gt;

</code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Drupal and TinyMCE]]></title>
    <link href="http://www.practicalweb.co.uk/blog/2009/07/07/drupal-and-tinymce/"/>
    <updated>2009-07-07T00:00:00+01:00</updated>
    <id>http://www.practicalweb.co.uk/blog/2009/07/07/drupal-and-tinymce</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been working on a Drupal project to build a CMS for the production and management of very specific content.</p>

<p>The emphasis is all on the  backend system, with tight field size limits (character count including markup) and restricted input (specified tags only).</p>

<p>Becuase of this I needed to use TinyMCE fully - restricting the  valid_elements set, and adding event handlers for paste, and keyup.</p>

<p>I also had to do this in a moderately deeply nested form.</p>

<p>While I tried quite hard to do this within the Drupal WYSIWYG module  <a href="http://drupal.org/node/488034">http://drupal.org/node/488034</a> it became clear that the project developer and I had incompatible goals. He wanted all features to be available only where they work on all Rich Text Editors, I wanted to use a feature only available in one.</p>

<p>Initially I tried just patching the module, but in the end I just couldn&rsquo;t get it working with multiple tinyMCE configurations in one form. This is supposed to be possible but the documentation is limited</p>

<ul>
<li><a href="http://drupal.org/node/358316">http://drupal.org/node/358316</a></li>
<li><a href="http://api.drupal.org/api/function/filter_form/6">http://api.drupal.org/api/function/filter_form/6</a></li>
<li><a href="http://groups.drupal.org/node/8911">http://groups.drupal.org/node/8911</a></li>
</ul>


<p>Part of the problem is that WYSIWYG works by detecting input filters which requires you to use them (I didn&rsquo;t want to) and using filters means you get &lsquo;help text&rsquo; - using multiple filters means users get to choose which one.</p>

<p>You can theme some of this cruft away - but then where&rsquo;s the benefit   of the easy to use GUI?</p>

<p>So I fell back to using TinyMCE directly, found out there is a nice jquery plugin <a href="http://tinymce.moxiecode.com/examples/example_23.php">http://tinymce.moxiecode.com/examples/example_23.php</a></p>

<p>And got my form up and running exactly as I wanted it in short order.</p>

<p>All I had to do was assign a class to the fields I wanted to be rich text editable,  create my settings, and adapt an existing character counter.</p>

<p>The settings look like</p>

<pre><code class="javascript">
var single = {
    valid_elements                    : 'b,i',
    theme_advanced_buttons1           : "bold,italic,cleanup",
    theme_advanced_buttons2           : "",
    theme_advanced_buttons3           : "",
    theme_advanced_statusbar_location : "bottom",
    theme_advanced_toolbar_location   : "top",
    theme                             : "advanced",
    theme_advanced_resizing           : true,
    plugins                           : "maxlength,safari",
};
</code></pre>

<p> TinyMCE is enabled by the lines</p>

<pre><code class="javascript">
 $().ready(function() {
        $('textarea.mceSingle').tinymce(single);
        $('textarea.mceEditor').tinymce(welcome);
});
</code></pre>

<p>No filters, no cruft in the user interface, and it was quicker to develop!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Drupal Forms Require a Submit Button]]></title>
    <link href="http://www.practicalweb.co.uk/blog/2009/07/06/drupal-forms-require-a-submit-button/"/>
    <updated>2009-07-06T00:00:00+01:00</updated>
    <id>http://www.practicalweb.co.uk/blog/2009/07/06/drupal-forms-require-a-submit-button</id>
    <content type="html"><![CDATA[<p>
I&#8217;m working on an AJAX heavy site for a defined audience who all have JavaScript - so I have a form with no submit button that gets submitted by an change handler. 
</p>


<p>
Normally I&#8217;d make sure the site was fully accessible - but not on this project so I just got rid of the submit button. I got the JavaScript submit working only to find my Drupal form no longer worked.
</p>


<p>
It seems that the Drupal submit handlers are not called if the form doesn&#8217;t have a submit button. I can&#8217;t see any reference to this in the Drupal API, but adding theÂ  button back in and hiding it via CSS works fine.
</p>


<p>
&nbsp;
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Phonegap]]></title>
    <link href="http://www.practicalweb.co.uk/blog/2009/03/24/phonegap/"/>
    <updated>2009-03-24T00:00:00+00:00</updated>
    <id>http://www.practicalweb.co.uk/blog/2009/03/24/phonegap</id>
    <content type="html"><![CDATA[<p>
Phonegap is an open source compatibility layer for mobile development.
</p>


<p>
It provides access to common mobile functionality such as geolocation, sound, contacts etc via a JavaScript API
</p>


<p>
The idea is to make phone development more like web development, and to make deploying cross platform pas much easier.
</p>


<p>
This project looks to be in fairly early stages, but already very powerful.
</p>


<p>
<a href="http://www.phonegap.com/">www.phonegap.com</a>Â  
</p>

]]></content>
  </entry>
  
</feed>
