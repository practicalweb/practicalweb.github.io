<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rhel | PracticalWeb Ltd]]></title>
  <link href="http://www.practicalweb.co.uk/blog/categories/rhel/atom.xml" rel="self"/>
  <link href="http://www.practicalweb.co.uk/"/>
  <updated>2014-11-13T15:10:58+00:00</updated>
  <id>http://www.practicalweb.co.uk/</id>
  <author>
    <name><![CDATA[Sean Burlington]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to Create a Custom Yum Repository on Centos 6]]></title>
    <link href="http://www.practicalweb.co.uk/blog/2012/11/21/how-to-create-a-custom-yum-repository-on-centos-6/"/>
    <updated>2012-11-21T00:00:00+00:00</updated>
    <id>http://www.practicalweb.co.uk/blog/2012/11/21/how-to-create-a-custom-yum-repository-on-centos-6</id>
    <content type="html"><![CDATA[<p>If you want to create custom rpms and install then with the usual automated dependency management you&rsquo;ll need your own yum repository. This is just the RPMS and metadata in the format of static xml files served by a webserver.</p>

<h2>First you need a GPG key to sign your packages.</h2>

<pre><code class="bash"># make some randomness if running headless 
sudo rngd -r /dev/urandom 
# start the agent
gpg-agent --use-standard-socket --daemon
# interactive key generation (accept the defaults for key type, provide your name and email when promted)
gpg --gen-key
# 
gpg --export -a 'My Name' &gt; MY-RPM-GPG-KEY
</code></pre>

<p>You won&rsquo;t need the random generator if you do this on a desktop, but on a headless system I found I needed this. These actions will store a private key in your keyring, and a public key in the specified file.</p>

<h2>Build your rpm</h2>

<p>First configure rpm to use the key you just added to your key ring, checing you don&rsquo;t oveerwrite earlier configuration).</p>

<pre><code class="bash">[ ! -f ~/.rpmmacros ] &amp;&amp; echo '%_signature gpg
%_gpg_name  My Name
' &gt; ~/.rpmmacros
</code></pre>

<p>Now build your RPM (assuming you are already setup to do this).</p>

<pre><code class="bash">rpmbuild -bb --sign ~/rpmbuild/SPECS/my-project.spec
</code></pre>

<h2>Setup the Yum Repo</h2>

<p>Setup apache, make the directory structure, with teh repo files. This can be the same or a different server to your build machine.</p>

<pre><code class="bash">
# make the repo base url
sudo mkdir -p /var/www/html/myrepo
# make it wrietable by you normal account
sudo chown $(id -un).$(id -gn) /var/www/html/myrepo 
# copy you rpm files
cp *rpm /var/www/html/myrepo
# create the metadata
createrepo /var/www/html/myrepo

# Setup an apache Alias for this directory
echo 'Alias /myrepo/ /var/www/html/myrepo/
' &gt; /etc/httpd/conf.d/my-yum-repo 

# restart Apache to pickup the change
service restart httpd
</code></pre>

<h2>Configure the system that will use the custom repo</h2>

<p>Copy over the GPG key, and import it into the  rpm database.</p>

<pre><code class="bash">sudo rpm --import MY-RPM-GPG-KEY
</code></pre>

<p>Configure yum to use the new repo.</p>

<pre><code class="bash">echo '[my-repo]
name=My Custom Packages
baseurl=http://yum.example.com/myrepo
&gt; /etc/yum.repos.d/my.repo 
</code></pre>

<p>Now you should be able to install your custom packages with regular yum commands. When you update your rpms just re-run the createrepo command to update the metadata.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Changing Default Port of Memcache on Centos 6]]></title>
    <link href="http://www.practicalweb.co.uk/blog/2012/11/12/changing-default-port-of-memcache-on-centos-6/"/>
    <updated>2012-11-12T00:00:00+00:00</updated>
    <id>http://www.practicalweb.co.uk/blog/2012/11/12/changing-default-port-of-memcache-on-centos-6</id>
    <content type="html"><![CDATA[<p>One of those things that just took me a lot longer than I expected&#8230;</p>




<p>Changing memcache port sdeems simple enough - just edit 
/etc/sysconfig/memcached and change the PORT value</p>




<p>BUT on a new centOS install memecache failed to start on any non-standard port.</p>


<p>To see any error message I had to edit the file /etc/init.d/memcached</p></p>

<p>and change the start line to </p>


<p><code></p>

<p>daemon &ndash;pidfile ${pidfile} memcached -d -v -p $PORT -u $USER  -m $CACHESIZE -c $MAXCONN -P ${pidfile} $OPTIONS
</code></p>

<p>Just adding the -v makes output verbose and I could see an error like </p>


<p><code>
memcache failed to listen on TCP port 11311 : Permission denied
</code></p>

<p>At this point I realised selinux was enabled by default, I tend to forget about this as it is so common for it to be disabled.</p>




<p><p>In order to add a new allowed port I added the following packages to edit selinux rules<p></p>

<p><code>policycoreutils-python
setroubleshoot-server</code></p>

<p><p>To check the name of the memcache port</p>
<code>
semanage port -l | grep memcache
</code>
<p>Then to allow the new port</p>
<code>
sudo semanage port -a -t memcache_port_t -p tcp 11311
</code></p>

<p><p>And now memcache works on the port I need for this project.</p></p>

<p><p>Sadly I don&rsquo;t see any good puppet modules to help with this, and it still seems selinux is very commonly disabled as it is tricky to work with.</p></p>
]]></content>
  </entry>
  
</feed>
