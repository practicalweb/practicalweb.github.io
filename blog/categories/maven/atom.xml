<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Maven | PracticalWeb Ltd]]></title>
  <link href="http://www.practicalweb.co.uk/blog/categories/maven/atom.xml" rel="self"/>
  <link href="http://www.practicalweb.co.uk/"/>
  <updated>2015-04-23T12:12:07+01:00</updated>
  <id>http://www.practicalweb.co.uk/</id>
  <author>
    <name><![CDATA[Sean Burlington]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Debugging With Maven and Eclipse]]></title>
    <link href="http://www.practicalweb.co.uk/blog/2014/11/19/debugging-with-maven-and-eclipse/"/>
    <updated>2014-11-19T16:11:44+00:00</updated>
    <id>http://www.practicalweb.co.uk/blog/2014/11/19/debugging-with-maven-and-eclipse</id>
    <content type="html"><![CDATA[<p>To use eclipse with Maven you need to add the maven plugin to eclipse, it seems to be part of the Indigo update site so this should be straightforward.</p>

<p>It&rsquo;s also at <a href="http://download.eclipse.org/technology/m2e/releases">http://download.eclipse.org/technology/m2e/releases</a></p>

<p>More instructions at <a href="http://maven.apache.org/guides/mini/guide-ide-eclipse.html">http://maven.apache.org/guides/mini/guide-ide-eclipse.html</a></p>

<p>To run the debugger you need to do two things: you need to tell maven to run surefire, and run a remote java debug listening to that surefire</p>

<p>Setup a new &ldquo;Debug configuration&rdquo; > &ldquo;Remote Java Application&rdquo;</p>

<p>It should look like</p>

<p><img src="/images/eclipse/maven/surefire.png" alt="screenshot" /></p>

<p>Next you need to run your maven code with the -Dmaven.surefire.debug</p>

<p>You can do this by adding it to the debug config like this</p>

<p><img src="/images/eclipse/maven/main-project.png" alt="screenshot" /></p>

<p>I&rsquo;ve used the debug mode - but maybe a run configuration would work too</p>

<p>An alternative is to run the maven project on command line</p>

<pre><code class="bash">mvn test -Dmaven.surefire.debug
</code></pre>

<p>Generally if I&rsquo;m using eclipse I prefer to do everything in the IDE (I stands for integrated after all) and it&rsquo;s useful to have the console output in the same place</p>

<p>Either way run the project to debug and maven will stop with output</p>

<pre><code>Listening for transport dt_socket at address: 5005
</code></pre>

<p>and wait till your debugger is attached</p>

<p>Now you have to start the remote application debug in eclipse</p>

<p>Execution will now stop at breakpoints and you will be able top explore the stack and all variables set</p>

<p><img src="/images/eclipse/maven/debug.png" alt="screenshot" /></p>

<p>This is an incredibly powerful way to explore running code, <em>especially</em> if you are unfamiliar with it. Even if you are familiar a debugger session can often be very enlightening.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Selenium WebDriver Annotations and Firefox Connection Trouble]]></title>
    <link href="http://www.practicalweb.co.uk/blog/2012/05/02/selenium-webdriver-annotations-and-firefox-connection-trouble/"/>
    <updated>2012-05-02T00:00:00+01:00</updated>
    <id>http://www.practicalweb.co.uk/blog/2012/05/02/selenium-webdriver-annotations-and-firefox-connection-trouble</id>
    <content type="html"><![CDATA[<p>
I needed to run some selenium tests written by a Java team using maven
</p>


<p>
I ran into a couple of errors
</p>


<p>
&nbsp;
</p>


<p>
<strong>Annotations are not supported in -source 1.3
</strong>
</p>


<p>
This error is because by default maven comples code to be compatible with an older version of Java
</p>


<p>
To fix I had to add the foloowing to then pom.xml file
</p>


<p>
 &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;<br />
&lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;<br />
&lt;version&gt;2.3.2&lt;/version&gt;<br />
&lt;configuration&gt;<br />
&lt;source&gt;1.6&lt;/source&gt;<br />
&lt;target&gt;1.6&lt;/target&gt;&lt;/configuration&gt;<br />
&lt;/plugin&gt;
</p>


<p>
This allows the use of more recent code constructs 
</p>


<p>
Next I had a firefox error 
</p>


<p>
<strong>org.openqa.selenium.firefox.NotConnectedException: Unable to connect to host 127.0.0.1 on port 7055 after 45000 ms. Firefox console output:</strong>
</p>


<p>
It seems that maven was targetting an older version of firefox than I am using, this time I changed the selenium version number in the config as below
</p>


<p>
             &lt;dependency&gt;<br />
                 &lt;groupId&gt;org.seleniumhq.selenium&lt;/groupId&gt;<br />
                 &lt;artifactId&gt;selenium-java&lt;/artifactId&gt;<br />
-                &lt;version&gt;2.14.0&lt;/version&gt;<br />
+                &lt;version&gt;2.19.0&lt;/version&gt;<br />
             &lt;/dependency&gt;  
</p>


<p>
&nbsp;
</p>

]]></content>
  </entry>
  
</feed>
