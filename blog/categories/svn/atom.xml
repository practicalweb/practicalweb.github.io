<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Svn | PracticalWeb Ltd]]></title>
  <link href="http://www.practicalweb.co.uk/blog/categories/svn/atom.xml" rel="self"/>
  <link href="http://www.practicalweb.co.uk/"/>
  <updated>2015-09-10T17:19:01+01:00</updated>
  <id>http://www.practicalweb.co.uk/</id>
  <author>
    <name><![CDATA[Sean Burlington]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Blocking Git Commits From Future Merges]]></title>
    <link href="http://www.practicalweb.co.uk/blog/2013/08/15/blocking-git-commits-from-future-merges/"/>
    <updated>2013-08-15T00:00:00+01:00</updated>
    <id>http://www.practicalweb.co.uk/blog/2013/08/15/blocking-git-commits-from-future-merges</id>
    <content type="html"><![CDATA[<p>I used to use subversion and <a href="http://www.orcaware.com/svn/wiki/Svnmerge.py">svnmerge</a> a lot, and there&#8217;s just one thing I miss about it. Now svnmerge is a tool to bolt on merge tracking to svn, and gits merge tracking is vastly better in many ways. But the one thing that svnmerge allowed me to do that was cool and doesn&#8217;t have a real equivalent in git is to block commits</p>




<p>I use release branches as well as feature branches, so for each release we support we have a barcnh, new features are developed in feature branches off this - and merged back to it when complete. The branch for release x gets merged forwards to release x+1 periodically - to ensure that any features or bugfixes make it to the latest release.</p>




<p>Sometimes we make a commit to an older release that we don&#8217;t want to merge forwards to newer releases - typically this is a quick and dirty bugfix/workaround that is superseded by a proper fix in the next release.</p>




<p>Svnmerge allowed you to &quot;block&quot; these commits so that they did not get merged forwards, with git you could cherry-pick around these commits - but you&#8217;d loose the ability to do regular merges.</p>




<p><p>What you can do it git is to merge the commit - but keep the files unchanged, this looks a bit weird but works OK.<p></p>

<p><code>git cherry-pick -e &ndash;strategy=ours $hash</code></p>

<p><p>The strategy=ours bit means keep the code as it was in this branch. -e lets you edit the commit message to indicate it isn&rsquo;t a normal merge</p></p>

<p><p>Now sometimes this doesn&rsquo;t seem to work, git complains that the commit is empty, I think this is when there is a conflict - in this case the only way I have worked around it is to do a regular cherry-pick and resolve the conflict manually - effectively undoing the commit. Then <code>commit &ndash;allow-empty</code></p>

<p></p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Export From Git for Drupal Site Releases]]></title>
    <link href="http://www.practicalweb.co.uk/blog/2011/11/15/export-from-git-for-drupal-site-releases/"/>
    <updated>2011-11-15T00:00:00+00:00</updated>
    <id>http://www.practicalweb.co.uk/blog/2011/11/15/export-from-git-for-drupal-site-releases</id>
    <content type="html"><![CDATA[<p>I&rsquo;m used to how svn export works, and have used this in a number of release scripts.</p>

<p>Git doesn&rsquo;t quite have an equivalent</p>

<p>There is</p>

<p><code>git archive</code></p>

<p>Which creates a tarball rather than a set of files, and while you can export a subset of the repository you still get the full path in the tarball.</p>

<p>and</p>

<p><code>git checkout-index</code></p>

<p>Which creates a set of files (these can be locate outside the working copy) but requires a local repository.</p>

<p>Also I&rsquo;m using github which doesn&rsquo;t support the remote repository option of git archive and their ready made tarball doesn&rsquo;t seem to work via wget on a private project (P.S. I since discovered the githaub tarbal works with wget if you pass params on the query string like ?login=${user}&amp;token=${token} )</p>

<p>What I really wanted was a script I could hand to the sysadmin, that he could run on any server without needing a local git repository.</p>

<p>In the end I have instead written a script that packages the tarball I want and uploads that to a server he can access it from.</p>

<p>&lt;?php</p>

<h1>!/bin/bash -ex</h1>

<h1>pass a valid release tag as a parameter to this script to create an release tarball and upload to skunkworks</h1>

<h1>this works on the local git repo - which must be up to date!</h1>

<p>git archive   $1 www > /tmp/${1}.tar
cd /tmp
tar -xf ${1}.tar
rm ${1}.tar
rm -Rf www/sites/default/
mv www $1
tar -czf ${1}.tar.gz $1
rm -Rf $1</p>

<p>scp ${1}.tar.gz dev.server.foo:/var/www/releases</p>

<p>?></p>

<p> Then there is another script that downloads and unpacks this to upgrade our site.</p>

<p>&lt;?php</p>

<h1>!/bin/bash -ex</h1>

<h1>parameter is release tag</h1>

<h1>tag has been released and uploaded to skunkworks</h1>

<h1>live site is backed up</h1>

<h1>live site docroot is /var/www/public_html</h1>

<h1>each release is at /var/www/$release</h1>

<h1>symlink points /var/www/public_html to current release</h1>

<h1>sites/default is common to every release - stored as /var/www/sites-default</h1>

<h1>symlink added to each release to point to this</h1>

<p>export COLUMNS=80</p>

<p>release=$1</p>

<p>cd /var/www/</p>

<p>wget <a href="http://dev.server.foo/releases/$">http://dev.server.foo/releases/$</a>{release}.tar.gz</p>

<p>tar -xzf ${release}.tar.gz</p>

<p>cd ${release}</p>

<p>ln -s /var/www/sites-default sites/default</p>

<p>drush -y vset site_offline_message &ldquo;<p>Site offline for upgrade</p>&rdquo;
drush -y vset site_offline 1</p>

<p>drush -y updb</p>

<p>drush cc all</p>

<h1>if the current user is a member of the www-data or apache group we can make the files owned by this group</h1>

<h1>as long as apache has umask 002 files should now be writable by us and apache</h1>

<p>groups | grep www-data > /dev/null &amp;&amp; find sites/default/files/ ! -group www-data -exec chgrp www-data {} \;
groups | grep apache > /dev/null &amp;&amp; find sites/default/files/ ! -group apache -exec chgrp apache {} \;</p>

<p>cd ..</p>

<p>rm public_html</p>

<p>ln -s ${release} public_html</p>

<p>cd ${release}</p>

<p>drush -y &ndash;uri=www.foo.com vset site_offline 0</p>

<p>?></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Svn Merges and Excess Merginfo Properties]]></title>
    <link href="http://www.practicalweb.co.uk/blog/2011/07/13/svn-merges-and-excess-merginfo-properties/"/>
    <updated>2011-07-13T00:00:00+01:00</updated>
    <id>http://www.practicalweb.co.uk/blog/2011/07/13/svn-merges-and-excess-merginfo-properties</id>
    <content type="html"><![CDATA[<p>The main svn server I&rsquo;m working on has finally upgraded to svn 1.5 - so easier merging is now possible - hooray.</p>

<p>But we&rsquo;ve been seeing merges that should only affect one file resulting in property changes on lots of files/directories. This isn&rsquo;t especially harmful - but it is annoying and makes reviewing the merge harder because of the extra noise.</p>

<p>It turns out that this extra mergeinfo is likely because of earlier merges on subtrees <a href="http://blogs.collab.net/subversion/2009/11/where-did-that-mergeinfo-come-from/">http://blogs.collab.net/subversion/2009/11/where-did-that-mergeinfo-come-from/</a></p>

<p>It is possible to remove the subtree mergeinfo via this command run from the root of the branch</p>

<p><code>
svn propdel -R svn:mergeinfo ./*
</code></p>

<p><a href="http://stackoverflow.com/questions/767418/remove-unnecessary-svnmergeinfo-properties">http://stackoverflow.com/questions/767418/remove-unnecessary-svnmergeinfo-properties</a></p>

<p>Which should get rid of the problem - I&rsquo;m just not 100% sure if it throws away important data.</p>

<p>For now I think I&rsquo;ll live with the nuisance - and come back to this if it becomes too annoying or if I gain greater insight into the issue.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Import an Svn Repository to Git]]></title>
    <link href="http://www.practicalweb.co.uk/blog/2011/05/14/import-an-svn-repository-to-git/"/>
    <updated>2011-05-14T00:00:00+01:00</updated>
    <id>http://www.practicalweb.co.uk/blog/2011/05/14/import-an-svn-repository-to-git</id>
    <content type="html"><![CDATA[<p>You&rsquo;ll need to have git and git-svn installed.</p>

<p>The code samples are run in bash on Linux.</p>

<h2>Initial Import</h2>


<p>The import process can be slow if you have a lot of history to import as git-svn has to pull in every single revision individally. I&rsquo;ve found it worthwhile creating a tiny svn repository to practice with as imports are quick and mistakes cheap.</p>

<p><code>
mkdir mynewgitrepo
cd mynewgitrepo
git svn init <svn repo url>  &ndash;tags=tags &ndash;branches=branches &ndash;trunk=trunk &ndash;prefix=svn
git svn fetch  # this takes ages
</code></p>

<p>You can use git-svn rebase to pull in further updates from svn and git-svn dcommit to commit back.</p>

<p>NB - if you are doing a one shot import and abandoning svn the look into the <a href="http://www.au.kernel.org/software/scm/git/docs/git-svn.html">authors-file and no-metadata options</a> - though <a href="http://www.au.kernel.org/software/scm/git/docs/git-filter-branch.html">git-filter-branch</a> may be a better way of cleaning up the history.</p>

<h2>Local and remote Branches</h2>


<p>git-svn creates remote branches that track changes in the svn repository, if you want to work on these branches you will need local copies, I&rsquo;ve used the prefix &ldquo;svn&rdquo; on importing which will be applied to the remote branches which allows me to create local branches with the same name as is used in svn.</p>

<p>To create a local copy of branch 1.0
<code>
git branch 1.0 svn/1.0
</code></p>

<p>To create local copies of all svn branches</p>

<p><code>
for branch in $(git branch -r | grep -v tags | grep -v trunk) ; do echo git branch ${branch#svn/} $branch ; done > local_branches</p>

<h1>review local_branches file</h1>

<p>. local_branches
</code></p>

<p>NB when a new branch is created in svn it won&rsquo;t appear automatically in git - use git svn fetch to achive this and then create a local copy of it if needed.</p>

<h2>Tags</h2>


<p>Subversion doesn&rsquo;t really distinguish between tags and branches - there is just a convention that copies of trunk are stored in &ldquo;branches&rdquo; for further commits and in &ldquo;tags&rdquo; to be left as a record of a a point in time. But you can in fact continue to work on subversion tags.</p>

<p>What git-svn does is to import tags as branches prefixed with /tags if the tag has commits git-svn creates a branch for each commit named tags/$tagname@$revison_id</p>

<p>If you want to you can make true git tags from these and delete the git branches - though you will (presumably) lose the ability to obtain further updates on these later.</p>

<p><code>
for tag in $(git branch -r | grep tags) ; do echo &ldquo;git tag ${tag#tags/} $tag &amp;&amp; git branch -r -d $tag &rdquo;; done > converttags</p>

<h1>review converttags file</h1>

<p>. converttags
</code></p>

<h2>Further git settings</h2>


<p>Migrate svn ignore settings
<code>
git-svn show-ignore > .gitignore
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Drupal Upgrades and Patches]]></title>
    <link href="http://www.practicalweb.co.uk/blog/2010/10/09/drupal-upgrades-and-patches/"/>
    <updated>2010-10-09T00:00:00+01:00</updated>
    <id>http://www.practicalweb.co.uk/blog/2010/10/09/drupal-upgrades-and-patches</id>
    <content type="html"><![CDATA[<p>Reading <a href="http://www.drupaler.co.uk/users/gregharvey">Greg</a>&rsquo;s <a href="http://www.drupaler.co.uk/blog/security-releases-dont-work/504">post on security upgrades</a> and a few mentions of patches in the following discussion got me thinking about upgrade methods.</p>

<p>The standard Drupal method is to delete existing files and unpack a tarball to replace the old version - I find this method unappealing because: I keep my code in subversion so don&rsquo;t want to delete the .svn subdirectories, and sometimes I have patches applied that I don&rsquo;t want to loose.</p>

<p>Drush provides a significant step up for managing updates, it&rsquo;s really easy to use and replaces just files not the directory structure so it plays well with subversion.</p>

<p>So I had a look around for methods to upgrade Drupal via patches (I really don&rsquo;t understand why this isn&rsquo;t the default) and I found</p>

<p>A whole lot of ready made patches
<a href="http://fuerstnet.de/en/drupal-upgrade-easier">http://fuerstnet.de/en/drupal-upgrade-easier</a></p>

<p>A handbook page about patch upgrades
<a href="http://drupal.org/node/359234">http://drupal.org/node/359234</a></p>

<p>And a script to generate patch files
<a href="http://2bits.com/articles/upgrading-drupal-5-2-installations-to-5-3-security-releases-using-a-single-patch.html">http://2bits.com/articles/upgrading-drupal-5-2-installations-to-5-3-security-releases-using-a-single-patch.html</a></p>

<p>Which is really cool - but all aimed at core - so I&rsquo;ve created a modified version which also works for modules (attached)</p>

<p>The main advantage of this method is that when patches have been applied to a live site but these patches haven&rsquo;t been accepted upstream - then it is still easy to upgrade to new releases - and should the patch later be accepted upstream the new release will generate a patch conflict alerting you to the relevant changes - and allowing you to choose how to proceed.</p>

<p>I don&rsquo;t recommend this technique for newbies, for most people drush updates are the way to go.</p>

<p>But if you find yourself maintaining patches on core or contrib modules that aren&rsquo;t moving through the issue queue - then maybe this may be helpful.</p>
]]></content>
  </entry>
  
</feed>
