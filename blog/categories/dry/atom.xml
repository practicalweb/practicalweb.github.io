<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Dry | PracticalWeb Ltd]]></title>
  <link href="http://www.practicalweb.co.uk/blog/categories/dry/atom.xml" rel="self"/>
  <link href="http://www.practicalweb.co.uk/"/>
  <updated>2014-10-31T16:31:24+00:00</updated>
  <id>http://www.practicalweb.co.uk/</id>
  <author>
    <name><![CDATA[Sean Burlington]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Selenium UI-Elements Rollups]]></title>
    <link href="http://www.practicalweb.co.uk/blog/2011/06/02/selenium-ui-elements-rollups/"/>
    <updated>2011-06-02T00:00:00+01:00</updated>
    <id>http://www.practicalweb.co.uk/blog/2011/06/02/selenium-ui-elements-rollups</id>
    <content type="html"><![CDATA[<p>I wasn&rsquo;t 100% clear from the docs how to implement rollup rules in selenium ui-elements and searching the web didn&rsquo;t return much - so here&rsquo;s an example in case it&rsquo;s helpful to others.</p>

<p>Add this to the user-extensions.js file</p>

<p><code>
var manager = new RollupManager();</p>

<p>manager.addRollupRule({
    name: &lsquo;compare_product&rsquo;
    , description: &lsquo;gets to the reults on a compare product page&rsquo;
    , args: [
        {
          name: &lsquo;term&rsquo;
        , description: &lsquo;the aliased term name of the category&rsquo;
        }
        , {
            name: &lsquo;provider&rsquo;
          , description: &lsquo;the provider name&rsquo;
          }
        , {
            name: &lsquo;product&rsquo;
          , description: &lsquo;the product name&rsquo;
          }
    ]
    , commandMatchers: [
        {
            command: &lsquo;click.+&rsquo;
            , target: &lsquo;starRatingsCompareProduct::search_go\(.+&rsquo;
        }
    ]
    , getExpandedCommands: function(args) {
        var commands = [];</p>

<pre><code>    commands.push({
        command: 'open'
            , target: '/star-ratings/find-star-ratings/'+args.term
    });

    commands.push({
        command: 'selectAndWait'
            , target: 'edit-provider'
    , value: args.provider
    });

    commands.push({
          command: 'pause'
        , target: '1000'
    });
    commands.push({
          command: 'selectAndWait'
        , target: 'edit-product'
        , value: args.product
    });
    commands.push({
          command: 'waitForElementPresent'
        , target: 'star-ratings-badge'
    });
    commands.push({
          command: 'clickAndWait'
        , target: 'edit-same-rating'
    });
    commands.push({
          command: 'waitForTextPresent'
        , target: 'Products with the same Star Rating'
    });
    return commands;
}
</code></pre>

<p>});</p>

<p></code></p>

<p>Then you can use it in selenium as below</p>

<p><code>
<tr>
    <td>rollup</td>
    <td>compare_product</td>
    <td>term=buy-let-insurance, provider=Cactus Cover, product=Residential Let</td>
</tr></p>

<p></code></p>

<p>This avoids me repeating chunks of code that I would otherwise need to get the page to the point at which I want to test it.</p>

<p>NB I&rsquo;ve kind of ignored the commandmatcher bit for the time being (this is a nicety to help the IDE notice a rollup while recording - it&rsquo;s a required field - but doesn&rsquo;t have to be useful).</p>

<p><b>This blog post sponsored by www.defaqto.com (they like their team to give back to the community)</b></p>
]]></content>
  </entry>
  
</feed>
