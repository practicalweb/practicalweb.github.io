<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ci | PracticalWeb Ltd]]></title>
  <link href="http://www.practicalweb.co.uk/blog/categories/ci/atom.xml" rel="self"/>
  <link href="http://www.practicalweb.co.uk/"/>
  <updated>2014-11-19T20:49:49+00:00</updated>
  <id>http://www.practicalweb.co.uk/</id>
  <author>
    <name><![CDATA[Sean Burlington]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to Build a Centos 6 Base Box for Vagrant]]></title>
    <link href="http://www.practicalweb.co.uk/blog/2012/10/16/how-to-build-a-centos-6-base-box-for-vagrant/"/>
    <updated>2012-10-16T00:00:00+01:00</updated>
    <id>http://www.practicalweb.co.uk/blog/2012/10/16/how-to-build-a-centos-6-base-box-for-vagrant</id>
    <content type="html"><![CDATA[<hr />

<p>Update : <a href="/blog/2014/10/28/creating-new-vagrant-base-boxes-with-veewee/">Creating new Vagrant base boxes with Veewee</a></p>

<p>I originally went down a manual route as I wanted to understand the process, and since I&rsquo;m familiar with manual installs this was the easiest path for me at the time.</p>

<p>You&rsquo;re probably better off using <a href="https://github.com/jedi4ever/veewee">veewee</a> or <a href="http://www.packer.io/">packer</a></p>

<hr />

<p>I&rsquo;ve been playing with <a href="http://vagrantup.com/">vagrant</a> a bit lately but of course the first thing I wanted was something they say is for advanced users only, creating my own base box.</p>

<p>I&rsquo;m not sure why this is given such a stark warning, it is perhaps a little long, but it wasn&rsquo;t too difficult, and given that I want to match a client install as closely as possible I want centos 6.2 (client has RHEL6.2)</p>

<p>There is a list of <a href="http://www.vagrantbox.es/">pre-built boxes</a> but I personally don&rsquo;t know how trustworthy those urls are.</p>

<p>So here is what I did (as well as I can reconstruct from notes) with a few comments.</p>

<p>I&rsquo;ve tried to keep this quite detailed so that it should achievable even if you don&rsquo;t regularly install new OS&rsquo;s</p>

<h2>On your local dev machine</h2>

<p>I&rsquo;m running Ubuntu 12.04.1 LTS locally</p>

<p>I have installed</p>

<pre><code>i A virtualbox                                                                                                                      - x86 virtualization solution - base binaries                                                                                              
i A virtualbox-dkms                                                                                                                 - x86 virtualization solution - kernel module sources for dkms                                                                             
i A virtualbox-fuse                                                                                                                 - x86 virtualization solution - virtual filesystem                                                                                         
i   virtualbox-guest-additions-iso                                                                                                  - guest additions iso image for VirtualBox                                                                                                 
i   virtualbox-ose-dkms                                                                                                             - transitional package for virtualbox-dkms                                                                                                 
i   virtualbox-ose-fuse                                                                                                             - transitional package for virtualbox-fuse                                                                                                 
i   virtualbox-ose-qt                                                                                                               - transitional package for virtualbox-qt                                                                                                   
i A virtualbox-qt                                                                                                                   - x86 virtualization solution - Qt based user interface  


i   vagrant                                                                                                                         - Tool for building and distributing virtualized development environments                                                                  
</code></pre>

<pre><code>wget http://mirrors.ukfast.co.uk/sites/ftp.centos.org/6.3/isos/i386/CentOS-6.3-i386-minimal.iso
</code></pre>

<h2>In Virtualbox GUI</h2>

<p><img src="/sites/default/files/step-1.jpeg" title="[step 1]" ></p>

<p>Create a new VM</p>

<p><img src="/sites/default/files/step-2.jpeg" title="[step 2]" ></p>

<p>Set OS to Linux and version to Red Hat</p>

<p>Call it &ldquo;vagrant-centos62&rdquo; (ie vagrant-${osname}</p>

<p><img src="/sites/default/files/step-3.jpeg" title="[step 3]" ></p>

<p>Set memory to 512Mb (this is just a default and can be altered later)</p>

<p><img src="/sites/default/files/step-4.jpeg" title="[step 4]" ></p>

<p>Create a new virtual hard disk</p>

<p><img src="/sites/default/files/step-5.jpeg" title="[step 5]" ></p>

<p>Use the default virtualbox format</p>

<p><img src="/sites/default/files/step-6.jpeg" title="[step 6]" ></p>

<p>Choose dynamically sized (This means the VM will see a large disk - but the space won&rsquo;t be used on your real hard disk - unless the virtual one has actual data on it)</p>

<p><img src="/sites/default/files/step-7.jpeg" title="[step 7]" ></p>

<p>Make it 32Gb in size (which should be big enough for most tasks)</p>

<p><img src="/sites/default/files/step-8.jpeg" title="[step 8]" ></p>

<p>Click create</p>

<h3>Virtualbox settings for this new VM</h3>

<p><img src="/sites/default/files/step-9.jpeg" title="[step 9]" ></p>

<p>Disable audio support (not normally needed for a development VM)</p>

<p><img src="/sites/default/files/step-10.jpeg" title="[step 10]" ></p>

<p>Same for USB</p>

<p><img src="/sites/default/files/step-11.jpeg" title="[step 11]" ></p>

<p>In Storage settings choose a virtual CD - and broswe to the iso you downloaded earlier.</p>

<p>Start the new VM</p>

<h2>In the Install process</h2>

<p>NB I don&rsquo;t show every single step here, as I got bored with all the confirmation screens. Hopefully the ones I mised are obvious enough.</p>

<p><img src="/sites/default/files/step-13.jpeg" title="[step 13]" ></p>

<p>Select to install a new OS</p>

<p><img src="/sites/default/files/step-14.jpeg" title="[step 14]" ></p>

<p>Re-initialize the hard drive (this is just the one on the VM that has never been used)</p>

<p><img src="/sites/default/files/step-15.jpeg" title="[step 15]" ></p>

<p>Set the root password to &ldquo;vagrant&rdquo; (and remember it for later)</p>

<p><img src="/sites/default/files/step-16.jpeg" title="[step 16]" ></p>

<p>Accept defaults for partitioning the disk, &ldquo;replace linux system&rdquo;</p>

<p><img src="/sites/default/files/step-17.jpeg" title="[step 17]" ></p>

<p>Write changes to disk</p>

<p><img src="/sites/default/files/step-18.jpeg" title="[step 18]" ></p>

<p>Reboot the VM</p>

<h2>In the VM</h2>

<p>So now thew new VM is up and running, we just need to prepare it for vagrant</p>

<p>Oddly centOS/RHEL network interfaces are not enabled by default, we need to change this.</p>

<pre><code class="bash">vi /etc/sysconfig/network-scripts/ifcfg-eth0 
</code></pre>

<p>set ONBOOT=&ldquo;yes&#8217; and BOOTPROTO=dhcp</p>

<p>Start the network
<code>ifup eth0</code></p>

<p>Install some packages we need to get Virtualbox additions to work (do this before rebooting). ALso it is important to update - to ensure the kernel in use matches the kernel-devel package</p>

<pre><code class="bash">yum update
yum install gcc make kernel-devel kernel-headers perl
</code></pre>

<p>Now shut down the VM a moment, and <b>in your local system</b> run</p>

<pre><code class="bash">VBoxManage modifyvm "vagrant-centos62" --natpf1 "guestssh,tcp,,2222,,22"
</code></pre>

<p>This will open an ssh port on localhost to the new VM (NB this can also be done via the GUI in advanced options on the network config).</p>

<p>Now start the VM again, and once booted, in the VM window menu, click &ldquo;Devices&rdquo; and &ldquo;Install guest additions&rdquo;</p>

<p>back in your local system again run
<code>ssh -p2222 root@localhost</code></p>

<p>Great so now we have root on the new machine, in your normal terminal and it should be possible to copy-paste the following commands</p>

<pre><code class="bash">mount /dev/cdrom /mnt/
sh /mnt/VBoxLinuxAdditions.run
</code></pre>

<p>errors related to KERN_DIR mean you don&rsquo;t have a matching running kernel and kerne-devel versions - check the update, install reboot steps above</p>

<p>Errors building openGL and windows drivers are expected (there is no windows system) these error messages don&rsquo;t mean the process failed.</p>

<p>Test that the additions are installed, the following command should run and print out some system facts</p>

<p><code>VBoxControl  guestproperty enumerate</code></p>

<p>Create vagrant user, group vagrant, password vagrant.</p>

<pre><code class="bash">groupadd admin
useradd -G admin -p $(openssl passwd -1 vagrant) vagrant
</code></pre>

<p>Install and configure sudo for vagrant user to have passwordless sudo powers</p>

<pre><code class="bash">yum -y install sudo

echo '
Defaults    env_keep += SSH_AUTH_SOCK 
%admin ALL=NOPASSWD: ALL
Defaults:vagrant !requiretty
' &amp;gt; /etc/sudoers.d/vagrant

chmod 0440 /etc/sudoers.d/vagrant

# the above for copy-paste convenience NEVER do this on a remote machine - use visudo instead
</code></pre>

<p>ssh with sudo commands should work, only asking a password for login (not again for sudo) from you local system try</p>

<pre><code>ssh -p2222 vagrant@localhost "sudo ls /"
</code></pre>

<p>Add vagrant&rsquo;s public key so vagrant user can ssh without password.</p>

<pre><code class="bash">sudo -u vagrant mkdir /home/vagrant/.ssh 
sudo -u vagrant curl -k https://raw.github.com/mitchellh/vagrant/master/keys/vagrant.pub &gt; /home/vagrant/.ssh/authorized_keys
chmod 0755 /home/vagrant/.ssh
chmod 0644 /home/vagrant/.ssh/authorized_keys
</code></pre>

<p>These keys are reccomended for publically distributable base boxes, the keys are included in the vargant programs and so login &lsquo;just works&rsquo; for anyone using vagrant. However this is not secure and these keys should only be allowed if your vagrant systems will be secured by a private network. If the boxes will be public use secure keys and and then specify the private key you created by setting config.ssh.private_key_path.</p>

<p>Install the Puppet Repository</p>

<p>According to the [official documentation}(<a href="http://vagrantup.com/v1/docs/base_boxes.html">http://vagrantup.com/v1/docs/base_boxes.html</a>)</p>

<p><blockquote><p>Chef and Puppet for provisioning support<br/>&hellip; are absolutely required of a base box in order to work properly with Vagrant.</p></blockquote></p>

<p>However this appears to me to be talking about a requirment for base boxes to be publically distributed, if you are building a base box for your own team I can&rsquo;t see why you would need either puppet or chef unless you will actually use them, but I may be wrong on this. The following instrcutions detail how to install both (on centos)</p>

<pre><code class="bash">echo '[puppetlabs]
name=Puppet Labs Packages
baseurl=http://yum.puppetlabs.com/el/$releasever/products/$basearch/
enabled=1
gpgcheck=1
gpgkey=http://yum.puppetlabs.com/RPM-GPG-KEY-puppetlabs
' &gt;  /etc/yum.repos.d/puppet.repo


# Install the EPEL x86_64 YUM Repository

rpm -Uvh http://download.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-7.noarch.rpm


# Install the Puppet Master packages (I'm not 100% sure if this is striclty required if you don't use the puppet master provisioner)

yum -y install puppet-server

#Install the Puppet Client packages

yum -y install puppet
</code></pre>

<p>If you want to use chef</p>

<pre><code class="bash">rpm -Uvh http://rbel.frameos.org/rbel6

# Install Ruby and other development tools:
yum install ruby ruby-devel ruby-ri ruby-rdoc ruby-shadow gcc gcc-c++ automake autoconf make curl dmidecode

# On RHEL 6 you will need to add the "RHEL Server Optional" channel subscription for this command to succeed without missing dependencies.

#We prefer to install RubyGems from source rather than use the OS-provided version (if any), as it is cross platform, so we know what to expect.
Install RubyGems
cd /tmp
curl -O http://production.cf.rubygems.org/rubygems/rubygems-1.8.10.tgz
tar zxf rubygems-1.8.10.tgz
cd rubygems-1.8.10
ruby setup.rb --no-format-executable

# Install Chef Gem

gem install chef --no-ri --no-rdoc
</code></pre>

<p>Clean up (freeing up space to make the final box smaller)</p>

<pre><code class="bash">yum remove gcc make kernel-devel kernel-headers perl
yum clean all
# TODO add more cleanup steps eg ruby tarballs, kernel-devel probably isn't needed after vbox additions is built etc
</code></pre>

<p>Finally shut down the VM, package the box and add it to your vagrant boxes.
On your local dev machine</p>

<pre><code class="bash">vagrant package --output centos62.box --base vagrant-centos62
vagrant box add centos62 centos62.box
vagrant box list # this should show the new box
</code></pre>

<p>Now you can quickly create a Vagrant VM</p>

<pre><code class="bash">mkdir vagrant_test
cd vagrant_test
vagrant init centos62
vagrant up
# wait while it boots
vagrant ssh
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jenkins Build Script for Drupal - Multistep With Changelogs]]></title>
    <link href="http://www.practicalweb.co.uk/blog/2012/09/28/jenkins-build-script-for-drupal-multistep-with-changelogs/"/>
    <updated>2012-09-28T00:00:00+01:00</updated>
    <id>http://www.practicalweb.co.uk/blog/2012/09/28/jenkins-build-script-for-drupal-multistep-with-changelogs</id>
    <content type="html"><![CDATA[<p><p>My build script has been getting more complex lately and I&rsquo;m quite pleased with it.<p></p>

<p><p>We tend to have several versions of code on the go,
version x is live, x+1 is in UAT, and x+2 is in development. With all these versions around it&rsquo;s important to keep track of changelogs, and to upgrade correctly x to x+1, and then x+1 to x+2 as we have found that going direct from x to x+2 can fail to uncover some bugs. Specifically this happens if a drupal update hook gets edited after it has been released to the client, but before it has run on live. Our builds always start from a copy of the live site.</p></p>

<p><p>I have also posted a <a href="http://www.practicalweb.co.uk/blog/12/07/12/check-drupal-update-hook-changes">script to review these update hooks</a> but this two step upgrade fits more easily into a continuous integration setup.</p></p>

<p><p>Each release has it&rsquo;s own branch, any hotfixes to branch x get merged forwards to x+1</p></p>

<p><p>This code is in jenkins - and is run remotely using the <a href="https://wiki.jenkins-ci.org/display/JENKINS/Publish+Over+SSH+Plugin">publish over ssh plugin</a></p></p>

<p><p>The jenkins job has two parameters, the target branch and the intermediate branch (where the HEAD of the intermediate branch is the code in UAT or x+1, and head of the target branch is the latest dev code - x +2</p></p>

<p><p>While this might sound complex, I find it easy to use in practice, partly because the complexity is there   anyway, even if you just code direct in master all the time, it&rsquo;s just that this way you can see it all, and see what is going on.</p></p>

<p><code></p>

<p>cd /var/www/</p>

<h1>there should be any changes on the server - but stash them just in case</h1>

<p>git stash</p>

<h1>get the latest code from upstream - but don&rsquo;t change our version yet</h1>

<p>git fetch</p>

<h1>check what branch we are on - in case this build also changes the test server to a new release</h1>

<p>current_branch=&ldquo;$(git symbolic-ref HEAD 2>/dev/null)&rdquo;
current_branch=${current_branch##refs/heads/}</p>

<h1>get the commit we are on and the one we will be on at the end</h1>

<p>current_id=$(git rev-parse &ndash;short origin/develop)
new_id=$(git rev-parse &ndash;short origin/branch)</p>

<h1>email a nice log to myself (TODO - pull this back into jenkins)</h1>

<p>git log &ndash;oneline &ndash;graph ${current_branch}..origin/$branch | mail -s &ldquo;updating $(hostname) from $current_branch $current_id to $branch $new_id&rdquo;   <a href="&#109;&#x61;&#x69;&#x6c;&#116;&#x6f;&#x3a;&#109;&#x65;&#64;&#101;&#x78;&#x61;&#x6d;&#112;&#108;&#101;&#x2e;&#99;&#x6f;&#x6d;">&#109;&#x65;&#x40;&#x65;&#x78;&#97;&#109;&#112;&#108;&#101;&#46;&#x63;&#x6f;&#109;</a></p>

<h1>update the code to the latest on the dev branch</h1>

<p>git checkout $branch
git merge origin/branch</p>

<h1>now build</h1>

<p>./build.sh ${intermediate}</p>

<p></code></p>

<p><p>The build script itself is used on developer machines as well as on the test server.<p></p>

<p><p>We use cronjobs to ensure we always have the latest backup from live available</p></p>

<p><code></p>

<h1>!/bin/bash -ex</h1>

<p>export COLUMNS=80
cd $(dirname $0)/www</p>

<h1>drop and reload the database</h1>

<p>drush -y sql-drop
type -P zcat &amp;>/dev/null &amp;&amp; {
  # if we have zcat leave db dump compressed
  zcat ../database_backups/www-latest.sql.gz | drush sqlc
} || {
  # otherwise unzip
  gunzip ../database_backups/www-latest.sql.gz
  drush sqlc &lt; ../database_backups/www-latest.sql</p>

<p>}</p>

<h1>get rid of production watchdog messages - so we can see any new ones easily</h1>

<p>drush watchdog-delete all -y</p>

<h1>put site offline</h1>

<p>drush -y vset maintenance_mode 1</p>

<h1>delete user files and replace with fresh ones from live - checking user permissions</h1>

<h1>NB I use umask and groups to ensure the files remain writable by apache and CLI</h1>

<p>if [ -d ../files_from_live/www ]
  then
   rm -Rf sites/default/files</p>

<p>   cp -R ../files_from_live/www/sites/default/files sites/default
   # cater for debian, ubuntu or mac
   groups | grep www-data > /dev/null &amp;&amp; find sites/default/files/ ! -group www-data -exec chgrp www-data {} \;
   groups | grep apache > /dev/null &amp;&amp; find sites/default/files/ ! -group apache -exec chgrp apache {} \;
   groups | grep <em>www > /dev/null &amp;&amp; find sites/default/files/ ! -group </em>www -exec chgrp _www {} \;
fi</p>

<p>   # put code version info online so we can easily check what is in the test site
echo &ldquo;$(git describe)&rdquo; > CODE-VERSION.TXT
echo &ldquo;$(git log &ndash;oneline -n 1 | sed &rsquo;s/ .*//&lsquo;)&rdquo; > CODE-HASH.TXT</p>

<h1>if this script is passed a intermediate version, check that out - upgrade and then checkout back to where we were</h1>

<p>if ! [ -z &ldquo;$1&rdquo; ]<br/>
  then
  branch_name=&ldquo;$(git symbolic-ref HEAD 2>/dev/null)&rdquo;
  branch_name=${branch_name##refs/heads/}
  git checkout $1
  drush -y updb
  #
  git checkout $branch_name
fi</p>

<h1>take site fully offline</h1>

<p>mv index.php bak-index.php
drush -y updb</p>

<h1>if the current user is a member of the www-data group we can make the files owned by this group</h1>

<h1>as long as apache has umask 002 files should now be writeable by us and apache</h1>

<p>groups | grep www-data > /dev/null &amp;&amp; find sites/default/files/ ! -group www-data -exec chgrp www-data {} \;
groups | grep apache > /dev/null &amp;&amp; find sites/default/files/ ! -group apache -exec chgrp apache {} \;
groups | grep <em>www > /dev/null &amp;&amp; find sites/default/files/ ! -group apache -exec chgrp </em>www {} \;</p>

<p>drush cc all</p>

<h1>any tasks that have to be done at the end of each deploy go in this drush hook</h1>

<p>drush helper-post-deploy</p>

<h1>on dev sites rewrite any user emails so we can&rsquo;t spam  customers by mistake</h1>

<p>drush helper-rewrite-emails</p>

<h1>set the admin password to one the devs know</h1>

<p>drush upwd admin &ndash;password=secret</p>

<h1>put the site online again</h1>

<p>drush -y vset maintenance_mode 0
mv bak-index.php index.php
drush cc all</p>

<h1>final permission reset just in case the last commands changed anything</h1>

<p>find sites/default/files/ -user $USER -type d -exec chmod 775 {} \;
find sites/default/files/ -user $USER -type f -exec chmod 664 {} \;</p>

<p></code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Script to Email Git Log as Part of a Dev Deploy]]></title>
    <link href="http://www.practicalweb.co.uk/blog/2012/07/12/script-to-email-git-log-as-part-of-a-dev-deploy/"/>
    <updated>2012-07-12T00:00:00+01:00</updated>
    <id>http://www.practicalweb.co.uk/blog/2012/07/12/script-to-email-git-log-as-part-of-a-dev-deploy</id>
    <content type="html"><![CDATA[<p>This script makes sure the dev site is clean, emails a log summary of updates about to be applied, updates the site and emails me so I know what changed.</p>

<p>I&rsquo;m using this on a dev site which is periodically updated to the latest master for testing.</p>

<p><code></p>

<h1>!/bin/bash</h1>

<p>cd /var/www/site</p>

<p>git stash
git checkout master
git fetch
git log &ndash;oneline master..origin/master | mail -s &ldquo;site updated &rdquo; <a href="&#x6d;&#97;&#x69;&#108;&#116;&#x6f;&#58;&#x6d;&#101;&#64;&#x65;&#120;&#97;&#109;&#112;&#x6c;&#101;&#46;&#x63;&#x6f;&#x6d;">&#109;&#x65;&#x40;&#101;&#x78;&#97;&#x6d;&#x70;&#x6c;&#x65;&#46;&#99;&#111;&#109;</a>
mit merge origin/master
./build.sh</p>

<p></code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jenkins Build Artifacts - Subdirectories]]></title>
    <link href="http://www.practicalweb.co.uk/blog/2012/06/01/jenkins-build-artifacts-subdirectories/"/>
    <updated>2012-06-01T00:00:00+01:00</updated>
    <id>http://www.practicalweb.co.uk/blog/2012/06/01/jenkins-build-artifacts-subdirectories</id>
    <content type="html"><![CDATA[<p>It took me an unreasonable amount of guesswork to figure out how to get jenkins to archive files at multiple folder levels</p>

<p>In the end this line worked for me</p>

<pre><code>Webdriver-framework/target/surefire-reports/*,Webdriver-framework/target/surefire-reports/**/*.png 
</code></pre>

<p>This grabs a report in one level - and images it references in subdirectories</p>
]]></content>
  </entry>
  
</feed>
