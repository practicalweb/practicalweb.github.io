<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Git | PracticalWeb Ltd]]></title>
  <link href="http://www.practicalweb.co.uk/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://www.practicalweb.co.uk/"/>
  <updated>2015-02-20T16:13:44+00:00</updated>
  <id>http://www.practicalweb.co.uk/</id>
  <author>
    <name><![CDATA[Sean Burlington]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Git Integration Branch Based Workflow]]></title>
    <link href="http://www.practicalweb.co.uk/blog/2015/02/16/git-integration-branch-based-workflow/"/>
    <updated>2015-02-16T16:53:30+00:00</updated>
    <id>http://www.practicalweb.co.uk/blog/2015/02/16/git-integration-branch-based-workflow</id>
    <content type="html"><![CDATA[<p>The branching strategy I&rsquo;ve found most effective and flexible is to use one branch per release version that is used for integration and feature branches off these for everything else.</p>

<p>It&rsquo;s hard to visualise and I&rsquo;ve tried drawing graphs but once I build in enough features to make the graph meaningful it is no longer easy to interpret.</p>

<p>At the end of the day there is a degree of complexity in a branching process suited to large teams and large projects - but it does come down to a few basic principles.</p>

<p>If you follow these principles you can maintain maximum release readiness, minimise conflicts, maximise flexibility, minimise bugs.</p>

<p>At the end of the day the goal is to try and make life easier for both the development team and the business team while delivering as much functionality as possible.</p>

<h2>1 Each release has an Integration branch</h2>

<p>When we start work on a new version the first thing we do is create a new integration branch based on the latest version of the previous release&rsquo;s integration branch.</p>

<p>Releases are made from tags on this branch, no code gets merged to the integration branch until it has passed initial testing.</p>

<p>In theory the integration branch is always release ready - in real life we find some bugs later than we&rsquo;d like, also sometimes we integrate early when we know a release is still a way off.</p>

<h2>2 Every feature or bugfix has a branch</h2>

<p>Developers (almost) never work directly on the integration branch but create a branch for very change from the earliest integration branch this change might be merged back into.</p>

<h2>3 Merge forwards</h2>

<p>Newer integration branches are forks of older integration branches so merging changes made to version x into version x+1 (or x+2 etc) will usually be trivial.</p>

<p>Feature branches are forks of integration branches - again this makes merging the integration code to the feature usually trivial.</p>

<p>I say the merge is usually trivial - occasionally two changes will have a conflict - for example if two developers have edited the same line in different ways. But by maintaining a branch hierarchy and merging frequently these conflicts are amazingly rare. Even when they do happen they will involve recently edited code which makes understanding the conflict much easier.</p>

<p>The thing that git is really really good at is merging two branches with a shared history.</p>

<p>If you do find you make a fix from a later integration branch (maybe you make a bugfix which you only later realise affects older releases too) then you may need to cherry pick commits back to an older branch - but this should be the exception.</p>

<h2>4 Work in the oldest branch you can</h2>

<p>If you don&rsquo;t know for sure which release a feature will be in start it from the oldest one it might be in - since integration branches share heritage you can</p>

<p>You can always merge a feature branch to a later integration branch (since the later integration branch contains the older one). But the reverse is tricky and you would need to cherry pick.</p>

<h2>5 Always merge the Integration branch to the feature branch before merging a feature</h2>

<p>Before merging a feature to the integration branch we first make sure that the feature branch has all the latest code for that release, then we test it.</p>

<p>This avoids the risk that our code works OK in isolation but conflicts in some way with another feature that was merged to integration after we started work.</p>

<p>It means that we will deal with any conflicts in the feature branch and that merging to integration will always be a simple fast forward merge with no conflicts.</p>

<h2>6 Never commit what you can build</h2>

<p>Don&rsquo;t put binary files or things like minified css/js in git, also don&rsquo;t commit version numbers. These sorts of files tend to change in multiple branches at once and are very prone to generating conflicts.</p>

<p>The better solution is to have a build script that pulls in any binaries needed from a separate store, builds minified  versions of files, does any compilation etc.</p>

<p>The build script could take the release number as a parameter or read it from a git tag and insert the version number into whatever file is needed.</p>

<h3>Side note on rebasing/squashing commits on feature branches</h3>

<p>Take a look at google <a href="https://www.google.co.uk/webhp?q=git+to+squash+or+not+to+squash">https://www.google.co.uk/webhp?q=git+to+squash+or+not+to+squash</a></p>

<p>There are a lot of opinions out there on whether or not to squash commits before merging a feature branch</p>

<p>Personally I prefer when people don&rsquo;t because I find that when they do the commit messages are quite terse &ldquo;added feature foo&rdquo;</p>

<p>I prefer to see the individual commits, and which lines were written at 5:30 on a Friday night when maybe someone was in a hurry to get home.</p>

<p>But if people do rebase then doing this on their feature branch just before merging to integration is a good time to do it.</p>

<p>Never rebase on integration.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blocking Git Commits From Future Merges]]></title>
    <link href="http://www.practicalweb.co.uk/blog/2013/08/15/blocking-git-commits-from-future-merges/"/>
    <updated>2013-08-15T00:00:00+01:00</updated>
    <id>http://www.practicalweb.co.uk/blog/2013/08/15/blocking-git-commits-from-future-merges</id>
    <content type="html"><![CDATA[<p>I used to use subversion and <a href="http://www.orcaware.com/svn/wiki/Svnmerge.py">svnmerge</a> a lot, and there&#8217;s just one thing I miss about it. Now svnmerge is a tool to bolt on merge tracking to svn, and gits merge tracking is vastly better in many ways. But the one thing that svnmerge allowed me to do that was cool and doesn&#8217;t have a real equivalent in git is to block commits</p>




<p>I use release branches as well as feature branches, so for each release we support we have a barcnh, new features are developed in feature branches off this - and merged back to it when complete. The branch for release x gets merged forwards to release x+1 periodically - to ensure that any features or bugfixes make it to the latest release.</p>




<p>Sometimes we make a commit to an older release that we don&#8217;t want to merge forwards to newer releases - typically this is a quick and dirty bugfix/workaround that is superseded by a proper fix in the next release.</p>




<p>Svnmerge allowed you to &quot;block&quot; these commits so that they did not get merged forwards, with git you could cherry-pick around these commits - but you&#8217;d loose the ability to do regular merges.</p>




<p><p>What you can do it git is to merge the commit - but keep the files unchanged, this looks a bit weird but works OK.<p></p>

<p><code>git cherry-pick -e &ndash;strategy=ours $hash</code></p>

<p><p>The strategy=ours bit means keep the code as it was in this branch. -e lets you edit the commit message to indicate it isn&rsquo;t a normal merge</p></p>

<p><p>Now sometimes this doesn&rsquo;t seem to work, git complains that the commit is empty, I think this is when there is a conflict - in this case the only way I have worked around it is to do a regular cherry-pick and resolve the conflict manually - effectively undoing the commit. Then <code>commit &ndash;allow-empty</code></p>

<p></p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Files With Local Changes I Don't Want Committed]]></title>
    <link href="http://www.practicalweb.co.uk/blog/2013/03/25/git-files-with-local-changes-i-dont-want-committed/"/>
    <updated>2013-03-25T00:00:00+00:00</updated>
    <id>http://www.practicalweb.co.uk/blog/2013/03/25/git-files-with-local-changes-i-dont-want-committed</id>
    <content type="html"><![CDATA[<p>I&#8217;m working on a project where I find I want to semi-regularly adjust a config file for local testing, but want to be sure I don&#8217;t commit that file by mistake.</p>




<p>Seems the best approach is</p>


<p><code>git update-index &ndash;skip-worktree $filename</code></p>

<p>This tells git to skip this file when I push, if the remote file changes it will warn me </p>




<p>To switch back</p>


<p><code>git update-index &ndash;no-skip-worktree $filename</code></p>

<p>There is also a assume-unchanged option - but this is aimed more at performance and bug workarounds - it realy does assume the file is unchanged - which in my case is incorrect.</p>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mini Scripts to Obtain Git Id/branch/tag]]></title>
    <link href="http://www.practicalweb.co.uk/blog/2013/02/05/mini-scripts-to-obtain-git-id-branch-tag/"/>
    <updated>2013-02-05T00:00:00+00:00</updated>
    <id>http://www.practicalweb.co.uk/blog/2013/02/05/mini-scripts-to-obtain-git-id-branch-tag</id>
    <content type="html"><![CDATA[<p><code>
$new_branch=$1 # passed as param</p>

<p>current_branch=&ldquo;$(git symbolic-ref HEAD 2>/dev/null)&rdquo;
current_branch=${current_branch##refs/heads/}</p>

<p>current_id=$(git rev-parse &ndash;short origin/$current_branch)</p>

<p>new_id=$(git rev-parse &ndash;short origin/$new_branch)</p>

<p>last_tag=$(git describe &ndash;abbrev=0 &ndash;tags)</p>

<p></code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Submodules and Subtrees]]></title>
    <link href="http://www.practicalweb.co.uk/blog/2012/11/26/git-submodules-and-subtrees/"/>
    <updated>2012-11-26T00:00:00+00:00</updated>
    <id>http://www.practicalweb.co.uk/blog/2012/11/26/git-submodules-and-subtrees</id>
    <content type="html"><![CDATA[<p>Git has the concept of both submodules and subtrees, there seem to be some problems with each solution, nether being well loved as far as I can see.</p>




<p>Both add significant complexity to a project, and require extra care - but the alternative is monolithic projects or a lot of copy-pasting.</p>




<p>Submodules allow another git repo to be nested inside the main one, you can then commit to either repo from the same filesystem.<br />
The &#8220;parent&#8221; repo references a specific tag/branch of the child one - it&#8217;s just this reference which is committed (and can be updated) in the parent.<br />
Commits in the parent relating to changes in subtree just show the ID changing and any message made when committing an updated version of the module. You can see commit history for the submodule when you are in that directory.
</p>


<p>The downside here being that neither a regular checkout nor a github tarball includes the child repo which adds overhead to dev build and server deploys.</p>




<p>Subtrees allow an additional external reference to be added and checked out as a subdirectory, this time the whole subdirectory is committed to the parent - but not the reference.<br />
The local repo does hold a reference and this allows the child repo to be merged in (preserving any local patches).<br />
The downside here is that the external reference has to be added manually to any repo that needs it, you don&#8217;t see the submodule history in the parent.</p>




<p>There&#8217;s a good article here <a href="http://codingkilledthecat.wordpress.com/2012/04/28/why-your-company-shouldnt-use-git-submodules/">http://codingkilledthecat.wordpress.com/2012/04/28/why-your-company-shouldnt-use-git-submodules</a> which basically says to use another tool - but that has it&#8217;s own set of problems.</p>



]]></content>
  </entry>
  
</feed>
